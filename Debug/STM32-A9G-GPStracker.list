
STM32-A9G-GPStracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb0  08003bb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003bb0  08003bb0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bb0  08003bb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000070  08003c28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08003c28  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009608  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c5  00000000  00000000  000296a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0002af68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002b660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019453  00000000  00000000  0002bcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009457  00000000  00000000  00045113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e14  00000000  00000000  0004e56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df37e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b1c  00000000  00000000  000df3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b1c 	.word	0x08003b1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003b1c 	.word	0x08003b1c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

	memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <HAL_UART_RxCpltCallback+0x40>)
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <HAL_UART_RxCpltCallback+0x44>)
 8000250:	0010      	movs	r0, r2
 8000252:	0019      	movs	r1, r3
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	001a      	movs	r2, r3
 800025a:	f002 ffd7 	bl	800320c <memcpy>
	printk("we got %s \n\r",rx_buffer);
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <HAL_UART_RxCpltCallback+0x44>)
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <HAL_UART_RxCpltCallback+0x48>)
 8000262:	0011      	movs	r1, r2
 8000264:	0018      	movs	r0, r3
 8000266:	f000 f9dd 	bl	8000624 <printk>
	clearRxBuffer();
 800026a:	f000 f9cd 	bl	8000608 <clearRxBuffer>
	HAL_UART_Receive_DMA (&huart3, rx_buffer ,UART3_BUFFER_SIZE);  // Receive 4 Bytes of data
 800026e:	2380      	movs	r3, #128	; 0x80
 8000270:	005a      	lsls	r2, r3, #1
 8000272:	4905      	ldr	r1, [pc, #20]	; (8000288 <HAL_UART_RxCpltCallback+0x44>)
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_UART_RxCpltCallback+0x4c>)
 8000276:	0018      	movs	r0, r3
 8000278:	f001 fe88 	bl	8001f8c <HAL_UART_Receive_DMA>

}
 800027c:	46c0      	nop			; (mov r8, r8)
 800027e:	46bd      	mov	sp, r7
 8000280:	b002      	add	sp, #8
 8000282:	bd80      	pop	{r7, pc}
 8000284:	200002e0 	.word	0x200002e0
 8000288:	200001e0 	.word	0x200001e0
 800028c:	08003b34 	.word	0x08003b34
 8000290:	2000008c 	.word	0x2000008c

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fba4 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f814 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f8dc 	bl	800045c <MX_GPIO_Init>
  MX_DMA_Init();
 80002a4:	f000 f8bc 	bl	8000420 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80002a8:	f000 f85a 	bl	8000360 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 80002ac:	f000 f888 	bl	80003c0 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&huart3, rx_buffer ,UART3_BUFFER_SIZE);  // Receive 4 Bytes of data
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	005a      	lsls	r2, r3, #1
 80002b4:	4902      	ldr	r1, [pc, #8]	; (80002c0 <main+0x2c>)
 80002b6:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <main+0x30>)
 80002b8:	0018      	movs	r0, r3
 80002ba:	f001 fe67 	bl	8001f8c <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002be:	e7fe      	b.n	80002be <main+0x2a>
 80002c0:	200001e0 	.word	0x200001e0
 80002c4:	2000008c 	.word	0x2000008c

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b093      	sub	sp, #76	; 0x4c
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	2414      	movs	r4, #20
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	0018      	movs	r0, r3
 80002d4:	2334      	movs	r3, #52	; 0x34
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f002 ffa0 	bl	800321e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	0018      	movs	r0, r3
 80002e2:	2310      	movs	r3, #16
 80002e4:	001a      	movs	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	f002 ff99 	bl	800321e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ec:	0021      	movs	r1, r4
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2202      	movs	r2, #2
 80002f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2201      	movs	r2, #1
 80002f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2210      	movs	r2, #16
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2202      	movs	r2, #2
 8000304:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2280      	movs	r2, #128	; 0x80
 800030a:	0212      	lsls	r2, r2, #8
 800030c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2280      	movs	r2, #128	; 0x80
 8000312:	0352      	lsls	r2, r2, #13
 8000314:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	187b      	adds	r3, r7, r1
 800031e:	0018      	movs	r0, r3
 8000320:	f001 f84e 	bl	80013c0 <HAL_RCC_OscConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000328:	f000 f9a4 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2207      	movs	r2, #7
 8000330:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2202      	movs	r2, #2
 8000336:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2101      	movs	r1, #1
 8000348:	0018      	movs	r0, r3
 800034a:	f001 fbbf 	bl	8001acc <HAL_RCC_ClockConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000352:	f000 f98f 	bl	8000674 <Error_Handler>
  }
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b013      	add	sp, #76	; 0x4c
 800035c:	bd90      	pop	{r4, r7, pc}
	...

08000360 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 8000366:	4a15      	ldr	r2, [pc, #84]	; (80003bc <MX_USART3_UART_Init+0x5c>)
 8000368:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800036a:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 800036c:	22e1      	movs	r2, #225	; 0xe1
 800036e:	0252      	lsls	r2, r2, #9
 8000370:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <MX_USART3_UART_Init+0x58>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fcfd 	bl	8001da4 <HAL_UART_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80003ae:	f000 f961 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	2000008c 	.word	0x2000008c
 80003bc:	40004800 	.word	0x40004800

080003c0 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <MX_USART4_UART_Init+0x5c>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003cc:	22e1      	movs	r2, #225	; 0xe1
 80003ce:	0252      	lsls	r2, r2, #9
 80003d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_USART4_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_USART4_UART_Init+0x58>)
 8000404:	0018      	movs	r0, r3
 8000406:	f001 fccd 	bl	8001da4 <HAL_UART_Init>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800040e:	f000 f931 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000114 	.word	0x20000114
 800041c:	40004c00 	.word	0x40004c00

08000420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_DMA_Init+0x38>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_DMA_Init+0x38>)
 800042c:	2101      	movs	r1, #1
 800042e:	430a      	orrs	r2, r1
 8000430:	615a      	str	r2, [r3, #20]
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_DMA_Init+0x38>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	2201      	movs	r2, #1
 8000438:	4013      	ands	r3, r2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	200a      	movs	r0, #10
 8000444:	f000 fbde 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000448:	200a      	movs	r0, #10
 800044a:	f000 fbf0 	bl	8000c2e <HAL_NVIC_EnableIRQ>

}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	40021000 	.word	0x40021000

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b089      	sub	sp, #36	; 0x24
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	240c      	movs	r4, #12
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2314      	movs	r3, #20
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f002 fed6 	bl	800321e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b61      	ldr	r3, [pc, #388]	; (80005f8 <MX_GPIO_Init+0x19c>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b60      	ldr	r3, [pc, #384]	; (80005f8 <MX_GPIO_Init+0x19c>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0309      	lsls	r1, r1, #12
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b5d      	ldr	r3, [pc, #372]	; (80005f8 <MX_GPIO_Init+0x19c>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	031b      	lsls	r3, r3, #12
 8000488:	4013      	ands	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b5a      	ldr	r3, [pc, #360]	; (80005f8 <MX_GPIO_Init+0x19c>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b59      	ldr	r3, [pc, #356]	; (80005f8 <MX_GPIO_Init+0x19c>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	0289      	lsls	r1, r1, #10
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b56      	ldr	r3, [pc, #344]	; (80005f8 <MX_GPIO_Init+0x19c>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	029b      	lsls	r3, r3, #10
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004aa:	4b53      	ldr	r3, [pc, #332]	; (80005f8 <MX_GPIO_Init+0x19c>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b52      	ldr	r3, [pc, #328]	; (80005f8 <MX_GPIO_Init+0x19c>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	02c9      	lsls	r1, r1, #11
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b4f      	ldr	r3, [pc, #316]	; (80005f8 <MX_GPIO_Init+0x19c>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	02db      	lsls	r3, r3, #11
 80004c0:	4013      	ands	r3, r2
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80004c6:	494d      	ldr	r1, [pc, #308]	; (80005fc <MX_GPIO_Init+0x1a0>)
 80004c8:	4b4d      	ldr	r3, [pc, #308]	; (8000600 <MX_GPIO_Init+0x1a4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 ff59 	bl	8001384 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	4a49      	ldr	r2, [pc, #292]	; (80005fc <MX_GPIO_Init+0x1a0>)
 80004d6:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	4a44      	ldr	r2, [pc, #272]	; (8000600 <MX_GPIO_Init+0x1a4>)
 80004ee:	0019      	movs	r1, r3
 80004f0:	0010      	movs	r0, r2
 80004f2:	f000 fdcf 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80004f6:	0021      	movs	r1, r4
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2206      	movs	r2, #6
 80004fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2290      	movs	r2, #144	; 0x90
 8000502:	0352      	lsls	r2, r2, #13
 8000504:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	000c      	movs	r4, r1
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	193b      	adds	r3, r7, r4
 8000510:	4a3b      	ldr	r2, [pc, #236]	; (8000600 <MX_GPIO_Init+0x1a4>)
 8000512:	0019      	movs	r1, r3
 8000514:	0010      	movs	r0, r2
 8000516:	f000 fdbd 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2201      	movs	r2, #1
 800051e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2290      	movs	r2, #144	; 0x90
 8000524:	0352      	lsls	r2, r2, #13
 8000526:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	193b      	adds	r3, r7, r4
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800052e:	193a      	adds	r2, r7, r4
 8000530:	2390      	movs	r3, #144	; 0x90
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fdac 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	22cc      	movs	r2, #204	; 0xcc
 8000540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2202      	movs	r2, #2
 8000546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2203      	movs	r2, #3
 8000558:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	193a      	adds	r2, r7, r4
 800055c:	2390      	movs	r3, #144	; 0x90
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fd96 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2203      	movs	r2, #3
 800056c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2202      	movs	r2, #2
 8000572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2203      	movs	r2, #3
 8000584:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000586:	193b      	adds	r3, r7, r4
 8000588:	4a1e      	ldr	r2, [pc, #120]	; (8000604 <MX_GPIO_Init+0x1a8>)
 800058a:	0019      	movs	r1, r3
 800058c:	0010      	movs	r0, r2
 800058e:	f000 fd81 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SCL_Pin I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000592:	0021      	movs	r1, r4
 8000594:	187b      	adds	r3, r7, r1
 8000596:	22c0      	movs	r2, #192	; 0xc0
 8000598:	0112      	lsls	r2, r2, #4
 800059a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800059c:	000c      	movs	r4, r1
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2212      	movs	r2, #18
 80005a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	2203      	movs	r2, #3
 80005ae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2201      	movs	r2, #1
 80005b4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_GPIO_Init+0x1a8>)
 80005ba:	0019      	movs	r1, r3
 80005bc:	0010      	movs	r0, r2
 80005be:	f000 fd69 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SCK_Pin SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	22e0      	movs	r2, #224	; 0xe0
 80005c8:	0212      	lsls	r2, r2, #8
 80005ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2202      	movs	r2, #2
 80005d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2203      	movs	r2, #3
 80005dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <MX_GPIO_Init+0x1a8>)
 80005e8:	0019      	movs	r1, r3
 80005ea:	0010      	movs	r0, r2
 80005ec:	f000 fd52 	bl	8001094 <HAL_GPIO_Init>

}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b009      	add	sp, #36	; 0x24
 80005f6:	bd90      	pop	{r4, r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	000003e1 	.word	0x000003e1
 8000600:	48000800 	.word	0x48000800
 8000604:	48000400 	.word	0x48000400

08000608 <clearRxBuffer>:

/* USER CODE BEGIN 4 */
void clearRxBuffer(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	005a      	lsls	r2, r3, #1
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <clearRxBuffer+0x18>)
 8000612:	2100      	movs	r1, #0
 8000614:	0018      	movs	r0, r3
 8000616:	f002 fe02 	bl	800321e <memset>
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200001e0 	.word	0x200001e0

08000624 <printk>:
{
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
}

void printk(const char *fmt, ...)
{
 8000624:	b40f      	push	{r0, r1, r2, r3}
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800062c:	2314      	movs	r3, #20
 800062e:	18fb      	adds	r3, r7, r3
 8000630:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	0049      	lsls	r1, r1, #1
 800063a:	480c      	ldr	r0, [pc, #48]	; (800066c <printk+0x48>)
 800063c:	f002 fe22 	bl	8003284 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <printk+0x48>)
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff fd60 	bl	8000108 <strlen>
 8000648:	0003      	movs	r3, r0
 800064a:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) buffer, len, -1);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	b29a      	uxth	r2, r3
 8000650:	2301      	movs	r3, #1
 8000652:	425b      	negs	r3, r3
 8000654:	4905      	ldr	r1, [pc, #20]	; (800066c <printk+0x48>)
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <printk+0x4c>)
 8000658:	f001 fbf8 	bl	8001e4c <HAL_UART_Transmit>
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b002      	add	sp, #8
 8000662:	bc80      	pop	{r7}
 8000664:	bc08      	pop	{r3}
 8000666:	b004      	add	sp, #16
 8000668:	4718      	bx	r3
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	200003e0 	.word	0x200003e0
 8000670:	20000114 	.word	0x20000114

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x44>)
 8000688:	699a      	ldr	r2, [r3, #24]
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_MspInit+0x44>)
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	619a      	str	r2, [r3, #24]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_MspInit+0x44>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	2201      	movs	r2, #1
 8000698:	4013      	ands	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_MspInit+0x44>)
 80006a0:	69da      	ldr	r2, [r3, #28]
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <HAL_MspInit+0x44>)
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	0549      	lsls	r1, r1, #21
 80006a8:	430a      	orrs	r2, r1
 80006aa:	61da      	str	r2, [r3, #28]
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_MspInit+0x44>)
 80006ae:	69da      	ldr	r2, [r3, #28]
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	055b      	lsls	r3, r3, #21
 80006b4:	4013      	ands	r3, r2
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b08d      	sub	sp, #52	; 0x34
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	241c      	movs	r4, #28
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	0018      	movs	r0, r3
 80006d6:	2314      	movs	r3, #20
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f002 fd9f 	bl	800321e <memset>
  if(huart->Instance==USART3)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a6a      	ldr	r2, [pc, #424]	; (8000890 <HAL_UART_MspInit+0x1c8>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d169      	bne.n	80007be <HAL_UART_MspInit+0xf6>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80006ea:	4b6a      	ldr	r3, [pc, #424]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 80006ec:	69da      	ldr	r2, [r3, #28]
 80006ee:	4b69      	ldr	r3, [pc, #420]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	02c9      	lsls	r1, r1, #11
 80006f4:	430a      	orrs	r2, r1
 80006f6:	61da      	str	r2, [r3, #28]
 80006f8:	4b66      	ldr	r3, [pc, #408]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 80006fa:	69da      	ldr	r2, [r3, #28]
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	02db      	lsls	r3, r3, #11
 8000700:	4013      	ands	r3, r2
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b63      	ldr	r3, [pc, #396]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	4b62      	ldr	r3, [pc, #392]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0309      	lsls	r1, r1, #12
 8000710:	430a      	orrs	r2, r1
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	4b5f      	ldr	r3, [pc, #380]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	031b      	lsls	r3, r3, #12
 800071c:	4013      	ands	r3, r2
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2281      	movs	r2, #129	; 0x81
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	0021      	movs	r1, r4
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2202      	movs	r2, #2
 8000730:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2203      	movs	r2, #3
 800073c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2201      	movs	r2, #1
 8000742:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	187b      	adds	r3, r7, r1
 8000746:	4a54      	ldr	r2, [pc, #336]	; (8000898 <HAL_UART_MspInit+0x1d0>)
 8000748:	0019      	movs	r1, r3
 800074a:	0010      	movs	r0, r2
 800074c:	f000 fca2 	bl	8001094 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000750:	4b52      	ldr	r3, [pc, #328]	; (800089c <HAL_UART_MspInit+0x1d4>)
 8000752:	4a53      	ldr	r2, [pc, #332]	; (80008a0 <HAL_UART_MspInit+0x1d8>)
 8000754:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000756:	4b51      	ldr	r3, [pc, #324]	; (800089c <HAL_UART_MspInit+0x1d4>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800075c:	4b4f      	ldr	r3, [pc, #316]	; (800089c <HAL_UART_MspInit+0x1d4>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000762:	4b4e      	ldr	r3, [pc, #312]	; (800089c <HAL_UART_MspInit+0x1d4>)
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000768:	4b4c      	ldr	r3, [pc, #304]	; (800089c <HAL_UART_MspInit+0x1d4>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800076e:	4b4b      	ldr	r3, [pc, #300]	; (800089c <HAL_UART_MspInit+0x1d4>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000774:	4b49      	ldr	r3, [pc, #292]	; (800089c <HAL_UART_MspInit+0x1d4>)
 8000776:	2220      	movs	r2, #32
 8000778:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800077a:	4b48      	ldr	r3, [pc, #288]	; (800089c <HAL_UART_MspInit+0x1d4>)
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	0192      	lsls	r2, r2, #6
 8000780:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <HAL_UART_MspInit+0x1d4>)
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fa6f 	bl	8000c68 <HAL_DMA_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800078e:	f7ff ff71 	bl	8000674 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000792:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <HAL_UART_MspInit+0x1dc>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <HAL_UART_MspInit+0x1dc>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	04c9      	lsls	r1, r1, #19
 800079c:	430a      	orrs	r2, r1
 800079e:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a3e      	ldr	r2, [pc, #248]	; (800089c <HAL_UART_MspInit+0x1d4>)
 80007a4:	675a      	str	r2, [r3, #116]	; 0x74
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <HAL_UART_MspInit+0x1d4>)
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	201d      	movs	r0, #29
 80007b2:	f000 fa27 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80007b6:	201d      	movs	r0, #29
 80007b8:	f000 fa39 	bl	8000c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80007bc:	e064      	b.n	8000888 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART4)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a39      	ldr	r2, [pc, #228]	; (80008a8 <HAL_UART_MspInit+0x1e0>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d15f      	bne.n	8000888 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART4_CLK_ENABLE();
 80007c8:	4b32      	ldr	r3, [pc, #200]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 80007ca:	69da      	ldr	r2, [r3, #28]
 80007cc:	4b31      	ldr	r3, [pc, #196]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 80007ce:	2180      	movs	r1, #128	; 0x80
 80007d0:	0309      	lsls	r1, r1, #12
 80007d2:	430a      	orrs	r2, r1
 80007d4:	61da      	str	r2, [r3, #28]
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 80007d8:	69da      	ldr	r2, [r3, #28]
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	031b      	lsls	r3, r3, #12
 80007de:	4013      	ands	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	0289      	lsls	r1, r1, #10
 80007ee:	430a      	orrs	r2, r1
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	029b      	lsls	r3, r3, #10
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	0309      	lsls	r1, r1, #12
 800080a:	430a      	orrs	r2, r1
 800080c:	615a      	str	r2, [r3, #20]
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <HAL_UART_MspInit+0x1cc>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	031b      	lsls	r3, r3, #12
 8000816:	4013      	ands	r3, r2
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800081c:	241c      	movs	r4, #28
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2202      	movs	r2, #2
 8000822:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2202      	movs	r2, #2
 8000828:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2203      	movs	r2, #3
 8000834:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2204      	movs	r2, #4
 800083a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	193a      	adds	r2, r7, r4
 800083e:	2390      	movs	r3, #144	; 0x90
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fc25 	bl	8001094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800084a:	0021      	movs	r1, r4
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	00d2      	lsls	r2, r2, #3
 8000852:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2202      	movs	r2, #2
 8000858:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2203      	movs	r2, #3
 8000864:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART4;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	187b      	adds	r3, r7, r1
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_UART_MspInit+0x1d0>)
 8000870:	0019      	movs	r1, r3
 8000872:	0010      	movs	r0, r2
 8000874:	f000 fc0e 	bl	8001094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	201d      	movs	r0, #29
 800087e:	f000 f9c1 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000882:	201d      	movs	r0, #29
 8000884:	f000 f9d3 	bl	8000c2e <HAL_NVIC_EnableIRQ>
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b00d      	add	sp, #52	; 0x34
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	40004800 	.word	0x40004800
 8000894:	40021000 	.word	0x40021000
 8000898:	48000800 	.word	0x48000800
 800089c:	2000019c 	.word	0x2000019c
 80008a0:	40020030 	.word	0x40020030
 80008a4:	40010000 	.word	0x40010000
 80008a8:	40004c00 	.word	0x40004c00

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f8d0 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 faeb 	bl	8000ebe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	2000019c 	.word	0x2000019c

080008f4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <USART3_4_IRQHandler+0x1c>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f001 fb9e 	bl	800203c <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <USART3_4_IRQHandler+0x20>)
 8000902:	0018      	movs	r0, r3
 8000904:	f001 fb9a 	bl	800203c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	2000008c 	.word	0x2000008c
 8000914:	20000114 	.word	0x20000114

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	; (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	18d3      	adds	r3, r2, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f002 fc36 	bl	80031b8 <__errno>
 800094c:	0003      	movs	r3, r0
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000952:	2301      	movs	r3, #1
 8000954:	425b      	negs	r3, r3
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	18d2      	adds	r2, r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <_sbrk+0x64>)
 8000968:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b006      	add	sp, #24
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20004000 	.word	0x20004000
 8000978:	00000400 	.word	0x00000400
 800097c:	200004e0 	.word	0x200004e0
 8000980:	200004f8 	.word	0x200004f8

08000984 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000992:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000994:	f7ff fff6 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	; (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009be:	f002 fc01 	bl	80031c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff fc67 	bl	8000294 <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   r0, =_estack
 80009c8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009d4:	08003bb8 	.word	0x08003bb8
  ldr r2, =_sbss
 80009d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009dc:	200004f8 	.word	0x200004f8

080009e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_COMP_IRQHandler>
	...

080009e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <HAL_Init+0x24>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_Init+0x24>)
 80009ee:	2110      	movs	r1, #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 f809 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fa:	f7ff fe41 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40022000 	.word	0x40022000

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a16:	681c      	ldr	r4, [r3, #0]
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_InitTick+0x60>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	23fa      	movs	r3, #250	; 0xfa
 8000a20:	0098      	lsls	r0, r3, #2
 8000a22:	f7ff fb83 	bl	800012c <__udivsi3>
 8000a26:	0003      	movs	r3, r0
 8000a28:	0019      	movs	r1, r3
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	f7ff fb7e 	bl	800012c <__udivsi3>
 8000a30:	0003      	movs	r3, r0
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 f90b 	bl	8000c4e <HAL_SYSTICK_Config>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e00f      	b.n	8000a60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d80b      	bhi.n	8000a5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	425b      	negs	r3, r3
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 f8d8 	bl	8000c04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_InitTick+0x64>)
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b003      	add	sp, #12
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x20>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	18d2      	adds	r2, r2, r3
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_IncTick+0x20>)
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	20000008 	.word	0x20000008
 8000a94:	200004e4 	.word	0x200004e4

08000a98 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <HAL_GetTick+0x10>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	200004e4 	.word	0x200004e4

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b7f      	cmp	r3, #127	; 0x7f
 8000abe:	d809      	bhi.n	8000ad4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	231f      	movs	r3, #31
 8000ac8:	401a      	ands	r2, r3
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_EnableIRQ+0x30>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	4091      	lsls	r1, r2
 8000ad0:	000a      	movs	r2, r1
 8000ad2:	601a      	str	r2, [r3, #0]
  }
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b7f      	cmp	r3, #127	; 0x7f
 8000af4:	d828      	bhi.n	8000b48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af6:	4a2f      	ldr	r2, [pc, #188]	; (8000bb4 <__NVIC_SetPriority+0xd4>)
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	33c0      	adds	r3, #192	; 0xc0
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	589b      	ldr	r3, [r3, r2]
 8000b06:	1dfa      	adds	r2, r7, #7
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	400a      	ands	r2, r1
 8000b10:	00d2      	lsls	r2, r2, #3
 8000b12:	21ff      	movs	r1, #255	; 0xff
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	22ff      	movs	r2, #255	; 0xff
 8000b24:	401a      	ands	r2, r3
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	4003      	ands	r3, r0
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	481f      	ldr	r0, [pc, #124]	; (8000bb4 <__NVIC_SetPriority+0xd4>)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	089b      	lsrs	r3, r3, #2
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	33c0      	adds	r3, #192	; 0xc0
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b46:	e031      	b.n	8000bac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <__NVIC_SetPriority+0xd8>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0019      	movs	r1, r3
 8000b50:	230f      	movs	r3, #15
 8000b52:	400b      	ands	r3, r1
 8000b54:	3b08      	subs	r3, #8
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	3306      	adds	r3, #6
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	18d3      	adds	r3, r2, r3
 8000b5e:	3304      	adds	r3, #4
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1dfa      	adds	r2, r7, #7
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	0011      	movs	r1, r2
 8000b68:	2203      	movs	r2, #3
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	00d2      	lsls	r2, r2, #3
 8000b6e:	21ff      	movs	r1, #255	; 0xff
 8000b70:	4091      	lsls	r1, r2
 8000b72:	000a      	movs	r2, r1
 8000b74:	43d2      	mvns	r2, r2
 8000b76:	401a      	ands	r2, r3
 8000b78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	019b      	lsls	r3, r3, #6
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	401a      	ands	r2, r3
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	0018      	movs	r0, r3
 8000b88:	2303      	movs	r3, #3
 8000b8a:	4003      	ands	r3, r0
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <__NVIC_SetPriority+0xd8>)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	001c      	movs	r4, r3
 8000b98:	230f      	movs	r3, #15
 8000b9a:	4023      	ands	r3, r4
 8000b9c:	3b08      	subs	r3, #8
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	3306      	adds	r3, #6
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	18c3      	adds	r3, r0, r3
 8000ba8:	3304      	adds	r3, #4
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	045b      	lsls	r3, r3, #17
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d301      	bcc.n	8000bd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e010      	b.n	8000bf6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <SysTick_Config+0x44>)
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bdc:	2301      	movs	r3, #1
 8000bde:	425b      	negs	r3, r3
 8000be0:	2103      	movs	r1, #3
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff ff7c 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <SysTick_Config+0x44>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SysTick_Config+0x44>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	210f      	movs	r1, #15
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	1c02      	adds	r2, r0, #0
 8000c14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	0002      	movs	r2, r0
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff ff33 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ffaf 	bl	8000bbc <SysTick_Config>
 8000c5e:	0003      	movs	r3, r0
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e036      	b.n	8000cec <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2221      	movs	r2, #33	; 0x21
 8000c82:	2102      	movs	r1, #2
 8000c84:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <HAL_DMA_Init+0x8c>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 f9c4 	bl	800105c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2221      	movs	r2, #33	; 0x21
 8000cde:	2101      	movs	r1, #1
 8000ce0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2220      	movs	r2, #32
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b004      	add	sp, #16
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	ffffc00f 	.word	0xffffc00f

08000cf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d06:	2317      	movs	r3, #23
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2220      	movs	r2, #32
 8000d12:	5c9b      	ldrb	r3, [r3, r2]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d101      	bne.n	8000d1c <HAL_DMA_Start_IT+0x24>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e04f      	b.n	8000dbc <HAL_DMA_Start_IT+0xc4>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2220      	movs	r2, #32
 8000d20:	2101      	movs	r1, #1
 8000d22:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2221      	movs	r2, #33	; 0x21
 8000d28:	5c9b      	ldrb	r3, [r3, r2]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d13a      	bne.n	8000da6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2221      	movs	r2, #33	; 0x21
 8000d34:	2102      	movs	r1, #2
 8000d36:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	438a      	bics	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f000 f954 	bl	8001002 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d008      	beq.n	8000d74 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	210e      	movs	r1, #14
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e00f      	b.n	8000d94 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	210a      	movs	r1, #10
 8000d80:	430a      	orrs	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2104      	movs	r1, #4
 8000d90:	438a      	bics	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2101      	movs	r1, #1
 8000da0:	430a      	orrs	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	e007      	b.n	8000db6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2220      	movs	r2, #32
 8000daa:	2100      	movs	r1, #0
 8000dac:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dae:	2317      	movs	r3, #23
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	2202      	movs	r2, #2
 8000db4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000db6:	2317      	movs	r3, #23
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	781b      	ldrb	r3, [r3, #0]
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b006      	add	sp, #24
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2221      	movs	r2, #33	; 0x21
 8000dd0:	5c9b      	ldrb	r3, [r3, r2]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2204      	movs	r2, #4
 8000ddc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2220      	movs	r2, #32
 8000de2:	2100      	movs	r1, #0
 8000de4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e020      	b.n	8000e2c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	210e      	movs	r1, #14
 8000df6:	438a      	bics	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	438a      	bics	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e12:	2101      	movs	r1, #1
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2221      	movs	r2, #33	; 0x21
 8000e1e:	2101      	movs	r1, #1
 8000e20:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2220      	movs	r2, #32
 8000e26:	2100      	movs	r1, #0
 8000e28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2221      	movs	r2, #33	; 0x21
 8000e48:	5c9b      	ldrb	r3, [r3, r2]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d006      	beq.n	8000e5e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2204      	movs	r2, #4
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e028      	b.n	8000eb0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	210e      	movs	r1, #14
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	438a      	bics	r2, r1
 8000e7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e86:	2101      	movs	r1, #1
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	000a      	movs	r2, r1
 8000e8c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2221      	movs	r2, #33	; 0x21
 8000e92:	2101      	movs	r1, #1
 8000e94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2220      	movs	r2, #32
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	0010      	movs	r0, r2
 8000eae:	4798      	blx	r3
    }
  }
  return status;
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	781b      	ldrb	r3, [r3, #0]
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b004      	add	sp, #16
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	2204      	movs	r2, #4
 8000edc:	409a      	lsls	r2, r3
 8000ede:	0013      	movs	r3, r2
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d024      	beq.n	8000f30 <HAL_DMA_IRQHandler+0x72>
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4013      	ands	r3, r2
 8000eec:	d020      	beq.n	8000f30 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d107      	bne.n	8000f0a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2104      	movs	r1, #4
 8000f06:	438a      	bics	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f12:	2104      	movs	r1, #4
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <HAL_DMA_IRQHandler+0x66>
 8000f22:	e06a      	b.n	8000ffa <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	0010      	movs	r0, r2
 8000f2c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f2e:	e064      	b.n	8000ffa <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	2202      	movs	r2, #2
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d02b      	beq.n	8000f98 <HAL_DMA_IRQHandler+0xda>
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	2202      	movs	r2, #2
 8000f44:	4013      	ands	r3, r2
 8000f46:	d027      	beq.n	8000f98 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2220      	movs	r2, #32
 8000f50:	4013      	ands	r3, r2
 8000f52:	d10b      	bne.n	8000f6c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	210a      	movs	r1, #10
 8000f60:	438a      	bics	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2221      	movs	r2, #33	; 0x21
 8000f68:	2101      	movs	r1, #1
 8000f6a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f74:	2102      	movs	r1, #2
 8000f76:	4091      	lsls	r1, r2
 8000f78:	000a      	movs	r2, r1
 8000f7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2220      	movs	r2, #32
 8000f80:	2100      	movs	r1, #0
 8000f82:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d036      	beq.n	8000ffa <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	0010      	movs	r0, r2
 8000f94:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000f96:	e030      	b.n	8000ffa <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d028      	beq.n	8000ffa <HAL_DMA_IRQHandler+0x13c>
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2208      	movs	r2, #8
 8000fac:	4013      	ands	r3, r2
 8000fae:	d024      	beq.n	8000ffa <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	210e      	movs	r1, #14
 8000fbc:	438a      	bics	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4091      	lsls	r1, r2
 8000fcc:	000a      	movs	r2, r1
 8000fce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2221      	movs	r2, #33	; 0x21
 8000fda:	2101      	movs	r1, #1
 8000fdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d005      	beq.n	8000ffa <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	0010      	movs	r0, r2
 8000ff6:	4798      	blx	r3
    }
  }
}
 8000ff8:	e7ff      	b.n	8000ffa <HAL_DMA_IRQHandler+0x13c>
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}

08001002 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001018:	2101      	movs	r1, #1
 800101a:	4091      	lsls	r1, r2
 800101c:	000a      	movs	r2, r1
 800101e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b10      	cmp	r3, #16
 800102e:	d108      	bne.n	8001042 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001040:	e007      	b.n	8001052 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	60da      	str	r2, [r3, #12]
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b004      	add	sp, #16
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a08      	ldr	r2, [pc, #32]	; (800108c <DMA_CalcBaseAndBitshift+0x30>)
 800106a:	4694      	mov	ip, r2
 800106c:	4463      	add	r3, ip
 800106e:	2114      	movs	r1, #20
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff f85b 	bl	800012c <__udivsi3>
 8001076:	0003      	movs	r3, r0
 8001078:	009a      	lsls	r2, r3, #2
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a03      	ldr	r2, [pc, #12]	; (8001090 <DMA_CalcBaseAndBitshift+0x34>)
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}
 800108c:	bffdfff8 	.word	0xbffdfff8
 8001090:	40020000 	.word	0x40020000

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	e155      	b.n	8001350 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d100      	bne.n	80010bc <HAL_GPIO_Init+0x28>
 80010ba:	e146      	b.n	800134a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2203      	movs	r2, #3
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d005      	beq.n	80010d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2203      	movs	r2, #3
 80010ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	409a      	lsls	r2, r3
 80010e2:	0013      	movs	r3, r2
 80010e4:	43da      	mvns	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	2201      	movs	r2, #1
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2203      	movs	r2, #3
 800113c:	4013      	ands	r3, r2
 800113e:	2b03      	cmp	r3, #3
 8001140:	d017      	beq.n	8001172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	43da      	mvns	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	4013      	ands	r3, r2
 800117a:	2b02      	cmp	r3, #2
 800117c:	d123      	bne.n	80011c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	58d3      	ldr	r3, [r2, r3]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2207      	movs	r2, #7
 8001190:	4013      	ands	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2107      	movs	r1, #7
 80011aa:	400b      	ands	r3, r1
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	6939      	ldr	r1, [r7, #16]
 80011c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	401a      	ands	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	23c0      	movs	r3, #192	; 0xc0
 8001200:	029b      	lsls	r3, r3, #10
 8001202:	4013      	ands	r3, r2
 8001204:	d100      	bne.n	8001208 <HAL_GPIO_Init+0x174>
 8001206:	e0a0      	b.n	800134a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001208:	4b57      	ldr	r3, [pc, #348]	; (8001368 <HAL_GPIO_Init+0x2d4>)
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	4b56      	ldr	r3, [pc, #344]	; (8001368 <HAL_GPIO_Init+0x2d4>)
 800120e:	2101      	movs	r1, #1
 8001210:	430a      	orrs	r2, r1
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	4b54      	ldr	r3, [pc, #336]	; (8001368 <HAL_GPIO_Init+0x2d4>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2201      	movs	r2, #1
 800121a:	4013      	ands	r3, r2
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001220:	4a52      	ldr	r2, [pc, #328]	; (800136c <HAL_GPIO_Init+0x2d8>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	589b      	ldr	r3, [r3, r2]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	409a      	lsls	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	43da      	mvns	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	2390      	movs	r3, #144	; 0x90
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	429a      	cmp	r2, r3
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0x1ee>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a47      	ldr	r2, [pc, #284]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x1ea>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a46      	ldr	r2, [pc, #280]	; (8001374 <HAL_GPIO_Init+0x2e0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x1e6>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a45      	ldr	r2, [pc, #276]	; (8001378 <HAL_GPIO_Init+0x2e4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x1e2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a44      	ldr	r2, [pc, #272]	; (800137c <HAL_GPIO_Init+0x2e8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x1de>
 800126e:	2304      	movs	r3, #4
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x1f0>
 8001272:	2305      	movs	r3, #5
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x1f0>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x1f0>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x1f0>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x1f0>
 8001282:	2300      	movs	r3, #0
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	2103      	movs	r1, #3
 8001288:	400a      	ands	r2, r1
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001294:	4935      	ldr	r1, [pc, #212]	; (800136c <HAL_GPIO_Init+0x2d8>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b37      	ldr	r3, [pc, #220]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43da      	mvns	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	035b      	lsls	r3, r3, #13
 80012ba:	4013      	ands	r3, r2
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012c6:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43da      	mvns	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	039b      	lsls	r3, r3, #14
 80012e4:	4013      	ands	r3, r2
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43da      	mvns	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	029b      	lsls	r3, r3, #10
 800130e:	4013      	ands	r3, r2
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43da      	mvns	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	025b      	lsls	r3, r3, #9
 8001338:	4013      	ands	r3, r2
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	40da      	lsrs	r2, r3
 8001358:	1e13      	subs	r3, r2, #0
 800135a:	d000      	beq.n	800135e <HAL_GPIO_Init+0x2ca>
 800135c:	e6a2      	b.n	80010a4 <HAL_GPIO_Init+0x10>
  } 
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b006      	add	sp, #24
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000
 8001370:	48000400 	.word	0x48000400
 8001374:	48000800 	.word	0x48000800
 8001378:	48000c00 	.word	0x48000c00
 800137c:	48001000 	.word	0x48001000
 8001380:	40010400 	.word	0x40010400

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	0008      	movs	r0, r1
 800138e:	0011      	movs	r1, r2
 8001390:	1cbb      	adds	r3, r7, #2
 8001392:	1c02      	adds	r2, r0, #0
 8001394:	801a      	strh	r2, [r3, #0]
 8001396:	1c7b      	adds	r3, r7, #1
 8001398:	1c0a      	adds	r2, r1, #0
 800139a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800139c:	1c7b      	adds	r3, r7, #1
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a4:	1cbb      	adds	r3, r7, #2
 80013a6:	881a      	ldrh	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ae:	1cbb      	adds	r3, r7, #2
 80013b0:	881a      	ldrh	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f000 fb76 	bl	8001ac0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	d100      	bne.n	80013e0 <HAL_RCC_OscConfig+0x20>
 80013de:	e08e      	b.n	80014fe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013e0:	4bc5      	ldr	r3, [pc, #788]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	220c      	movs	r2, #12
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d00e      	beq.n	800140a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ec:	4bc2      	ldr	r3, [pc, #776]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	220c      	movs	r2, #12
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d117      	bne.n	8001428 <HAL_RCC_OscConfig+0x68>
 80013f8:	4bbf      	ldr	r3, [pc, #764]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	23c0      	movs	r3, #192	; 0xc0
 80013fe:	025b      	lsls	r3, r3, #9
 8001400:	401a      	ands	r2, r3
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	025b      	lsls	r3, r3, #9
 8001406:	429a      	cmp	r2, r3
 8001408:	d10e      	bne.n	8001428 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140a:	4bbb      	ldr	r3, [pc, #748]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	029b      	lsls	r3, r3, #10
 8001412:	4013      	ands	r3, r2
 8001414:	d100      	bne.n	8001418 <HAL_RCC_OscConfig+0x58>
 8001416:	e071      	b.n	80014fc <HAL_RCC_OscConfig+0x13c>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d000      	beq.n	8001422 <HAL_RCC_OscConfig+0x62>
 8001420:	e06c      	b.n	80014fc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	f000 fb4c 	bl	8001ac0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x80>
 8001430:	4bb1      	ldr	r3, [pc, #708]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4bb0      	ldr	r3, [pc, #704]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	0249      	lsls	r1, r1, #9
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e02f      	b.n	80014a0 <HAL_RCC_OscConfig+0xe0>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10c      	bne.n	8001462 <HAL_RCC_OscConfig+0xa2>
 8001448:	4bab      	ldr	r3, [pc, #684]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4baa      	ldr	r3, [pc, #680]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800144e:	49ab      	ldr	r1, [pc, #684]	; (80016fc <HAL_RCC_OscConfig+0x33c>)
 8001450:	400a      	ands	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	4ba8      	ldr	r3, [pc, #672]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4ba7      	ldr	r3, [pc, #668]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800145a:	49a9      	ldr	r1, [pc, #676]	; (8001700 <HAL_RCC_OscConfig+0x340>)
 800145c:	400a      	ands	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	e01e      	b.n	80014a0 <HAL_RCC_OscConfig+0xe0>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b05      	cmp	r3, #5
 8001468:	d10e      	bne.n	8001488 <HAL_RCC_OscConfig+0xc8>
 800146a:	4ba3      	ldr	r3, [pc, #652]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4ba2      	ldr	r3, [pc, #648]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	02c9      	lsls	r1, r1, #11
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	4b9f      	ldr	r3, [pc, #636]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b9e      	ldr	r3, [pc, #632]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	0249      	lsls	r1, r1, #9
 8001482:	430a      	orrs	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0xe0>
 8001488:	4b9b      	ldr	r3, [pc, #620]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b9a      	ldr	r3, [pc, #616]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800148e:	499b      	ldr	r1, [pc, #620]	; (80016fc <HAL_RCC_OscConfig+0x33c>)
 8001490:	400a      	ands	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	4b98      	ldr	r3, [pc, #608]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b97      	ldr	r3, [pc, #604]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800149a:	4999      	ldr	r1, [pc, #612]	; (8001700 <HAL_RCC_OscConfig+0x340>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d014      	beq.n	80014d2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff faf6 	bl	8000a98 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b2:	f7ff faf1 	bl	8000a98 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b64      	cmp	r3, #100	; 0x64
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e2fd      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c4:	4b8c      	ldr	r3, [pc, #560]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	029b      	lsls	r3, r3, #10
 80014cc:	4013      	ands	r3, r2
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0xf2>
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fae1 	bl	8000a98 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fadc 	bl	8000a98 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e2e8      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	029b      	lsls	r3, r3, #10
 80014f6:	4013      	ands	r3, r2
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x11c>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	d100      	bne.n	800150a <HAL_RCC_OscConfig+0x14a>
 8001508:	e06c      	b.n	80015e4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800150a:	4b7b      	ldr	r3, [pc, #492]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	220c      	movs	r2, #12
 8001510:	4013      	ands	r3, r2
 8001512:	d00e      	beq.n	8001532 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001514:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	220c      	movs	r2, #12
 800151a:	4013      	ands	r3, r2
 800151c:	2b08      	cmp	r3, #8
 800151e:	d11f      	bne.n	8001560 <HAL_RCC_OscConfig+0x1a0>
 8001520:	4b75      	ldr	r3, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	23c0      	movs	r3, #192	; 0xc0
 8001526:	025b      	lsls	r3, r3, #9
 8001528:	401a      	ands	r2, r3
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	429a      	cmp	r2, r3
 8001530:	d116      	bne.n	8001560 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	4b71      	ldr	r3, [pc, #452]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2202      	movs	r2, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x188>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d001      	beq.n	8001548 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e2bb      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b6b      	ldr	r3, [pc, #428]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	22f8      	movs	r2, #248	; 0xf8
 800154e:	4393      	bics	r3, r2
 8001550:	0019      	movs	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00da      	lsls	r2, r3, #3
 8001558:	4b67      	ldr	r3, [pc, #412]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	e041      	b.n	80015e4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d024      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001568:	4b63      	ldr	r3, [pc, #396]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800156e:	2101      	movs	r1, #1
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fa90 	bl	8000a98 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157e:	f7ff fa8b 	bl	8000a98 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e297      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d0f1      	beq.n	800157e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	22f8      	movs	r2, #248	; 0xf8
 80015a0:	4393      	bics	r3, r2
 80015a2:	0019      	movs	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	00da      	lsls	r2, r3, #3
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e018      	b.n	80015e4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b2:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	438a      	bics	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fa6b 	bl	8000a98 <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fa66 	bl	8000a98 <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e272      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2202      	movs	r2, #2
 80015e0:	4013      	ands	r3, r2
 80015e2:	d1f1      	bne.n	80015c8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2208      	movs	r2, #8
 80015ea:	4013      	ands	r3, r2
 80015ec:	d036      	beq.n	800165c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d019      	beq.n	800162a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80015f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fa:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	430a      	orrs	r2, r1
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff fa49 	bl	8000a98 <HAL_GetTick>
 8001606:	0003      	movs	r3, r0
 8001608:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff fa44 	bl	8000a98 <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e250      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	2202      	movs	r2, #2
 8001624:	4013      	ands	r3, r2
 8001626:	d0f1      	beq.n	800160c <HAL_RCC_OscConfig+0x24c>
 8001628:	e018      	b.n	800165c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800162c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001630:	2101      	movs	r1, #1
 8001632:	438a      	bics	r2, r1
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff fa2f 	bl	8000a98 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fa2a 	bl	8000a98 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e236      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	d1f1      	bne.n	8001640 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2204      	movs	r2, #4
 8001662:	4013      	ands	r3, r2
 8001664:	d100      	bne.n	8001668 <HAL_RCC_OscConfig+0x2a8>
 8001666:	e0b5      	b.n	80017d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001668:	201f      	movs	r0, #31
 800166a:	183b      	adds	r3, r7, r0
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	055b      	lsls	r3, r3, #21
 8001678:	4013      	ands	r3, r2
 800167a:	d110      	bne.n	800169e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800167e:	69da      	ldr	r2, [r3, #28]
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	0549      	lsls	r1, r1, #21
 8001686:	430a      	orrs	r2, r1
 8001688:	61da      	str	r2, [r3, #28]
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	055b      	lsls	r3, r3, #21
 8001692:	4013      	ands	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001698:	183b      	adds	r3, r7, r0
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_RCC_OscConfig+0x344>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4013      	ands	r3, r2
 80016a8:	d11a      	bne.n	80016e0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_RCC_OscConfig+0x344>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_RCC_OscConfig+0x344>)
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0049      	lsls	r1, r1, #1
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f9ee 	bl	8000a98 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c2:	f7ff f9e9 	bl	8000a98 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e1f5      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_RCC_OscConfig+0x344>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4013      	ands	r3, r2
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10f      	bne.n	8001708 <HAL_RCC_OscConfig+0x348>
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80016ea:	6a1a      	ldr	r2, [r3, #32]
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <HAL_RCC_OscConfig+0x338>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	430a      	orrs	r2, r1
 80016f2:	621a      	str	r2, [r3, #32]
 80016f4:	e036      	b.n	8001764 <HAL_RCC_OscConfig+0x3a4>
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	40021000 	.word	0x40021000
 80016fc:	fffeffff 	.word	0xfffeffff
 8001700:	fffbffff 	.word	0xfffbffff
 8001704:	40007000 	.word	0x40007000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10c      	bne.n	800172a <HAL_RCC_OscConfig+0x36a>
 8001710:	4bca      	ldr	r3, [pc, #808]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001712:	6a1a      	ldr	r2, [r3, #32]
 8001714:	4bc9      	ldr	r3, [pc, #804]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001716:	2101      	movs	r1, #1
 8001718:	438a      	bics	r2, r1
 800171a:	621a      	str	r2, [r3, #32]
 800171c:	4bc7      	ldr	r3, [pc, #796]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800171e:	6a1a      	ldr	r2, [r3, #32]
 8001720:	4bc6      	ldr	r3, [pc, #792]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001722:	2104      	movs	r1, #4
 8001724:	438a      	bics	r2, r1
 8001726:	621a      	str	r2, [r3, #32]
 8001728:	e01c      	b.n	8001764 <HAL_RCC_OscConfig+0x3a4>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x38c>
 8001732:	4bc2      	ldr	r3, [pc, #776]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001734:	6a1a      	ldr	r2, [r3, #32]
 8001736:	4bc1      	ldr	r3, [pc, #772]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001738:	2104      	movs	r1, #4
 800173a:	430a      	orrs	r2, r1
 800173c:	621a      	str	r2, [r3, #32]
 800173e:	4bbf      	ldr	r3, [pc, #764]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	4bbe      	ldr	r3, [pc, #760]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	621a      	str	r2, [r3, #32]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0x3a4>
 800174c:	4bbb      	ldr	r3, [pc, #748]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800174e:	6a1a      	ldr	r2, [r3, #32]
 8001750:	4bba      	ldr	r3, [pc, #744]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001752:	2101      	movs	r1, #1
 8001754:	438a      	bics	r2, r1
 8001756:	621a      	str	r2, [r3, #32]
 8001758:	4bb8      	ldr	r3, [pc, #736]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800175a:	6a1a      	ldr	r2, [r3, #32]
 800175c:	4bb7      	ldr	r3, [pc, #732]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800175e:	2104      	movs	r1, #4
 8001760:	438a      	bics	r2, r1
 8001762:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d014      	beq.n	8001796 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7ff f994 	bl	8000a98 <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	e009      	b.n	800178a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff f98f 	bl	8000a98 <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	4aaf      	ldr	r2, [pc, #700]	; (8001a40 <HAL_RCC_OscConfig+0x680>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e19a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178a:	4bac      	ldr	r3, [pc, #688]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x3b6>
 8001794:	e013      	b.n	80017be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff f97f 	bl	8000a98 <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	e009      	b.n	80017b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7ff f97a 	bl	8000a98 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	4aa5      	ldr	r2, [pc, #660]	; (8001a40 <HAL_RCC_OscConfig+0x680>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e185      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	4ba1      	ldr	r3, [pc, #644]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	2202      	movs	r2, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017be:	231f      	movs	r3, #31
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b9c      	ldr	r3, [pc, #624]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80017ca:	69da      	ldr	r2, [r3, #28]
 80017cc:	4b9b      	ldr	r3, [pc, #620]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80017ce:	499d      	ldr	r1, [pc, #628]	; (8001a44 <HAL_RCC_OscConfig+0x684>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2210      	movs	r2, #16
 80017da:	4013      	ands	r3, r2
 80017dc:	d063      	beq.n	80018a6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d12a      	bne.n	800183c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017e6:	4b95      	ldr	r3, [pc, #596]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80017e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ea:	4b94      	ldr	r3, [pc, #592]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80017ec:	2104      	movs	r1, #4
 80017ee:	430a      	orrs	r2, r1
 80017f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017f2:	4b92      	ldr	r3, [pc, #584]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80017f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f6:	4b91      	ldr	r3, [pc, #580]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff f94b 	bl	8000a98 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001808:	f7ff f946 	bl	8000a98 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e152      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800181a:	4b88      	ldr	r3, [pc, #544]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800181c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d0f1      	beq.n	8001808 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001824:	4b85      	ldr	r3, [pc, #532]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001828:	22f8      	movs	r2, #248	; 0xf8
 800182a:	4393      	bics	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	00da      	lsls	r2, r3, #3
 8001834:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001836:	430a      	orrs	r2, r1
 8001838:	635a      	str	r2, [r3, #52]	; 0x34
 800183a:	e034      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	3305      	adds	r3, #5
 8001842:	d111      	bne.n	8001868 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001844:	4b7d      	ldr	r3, [pc, #500]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001848:	4b7c      	ldr	r3, [pc, #496]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800184a:	2104      	movs	r1, #4
 800184c:	438a      	bics	r2, r1
 800184e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001850:	4b7a      	ldr	r3, [pc, #488]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001854:	22f8      	movs	r2, #248	; 0xf8
 8001856:	4393      	bics	r3, r2
 8001858:	0019      	movs	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	00da      	lsls	r2, r3, #3
 8001860:	4b76      	ldr	r3, [pc, #472]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001862:	430a      	orrs	r2, r1
 8001864:	635a      	str	r2, [r3, #52]	; 0x34
 8001866:	e01e      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001868:	4b74      	ldr	r3, [pc, #464]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800186a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186c:	4b73      	ldr	r3, [pc, #460]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800186e:	2104      	movs	r1, #4
 8001870:	430a      	orrs	r2, r1
 8001872:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001874:	4b71      	ldr	r3, [pc, #452]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001878:	4b70      	ldr	r3, [pc, #448]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800187a:	2101      	movs	r1, #1
 800187c:	438a      	bics	r2, r1
 800187e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff f90a 	bl	8000a98 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800188a:	f7ff f905 	bl	8000a98 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e111      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800189c:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800189e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	d1f1      	bne.n	800188a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2220      	movs	r2, #32
 80018ac:	4013      	ands	r3, r2
 80018ae:	d05c      	beq.n	800196a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018b0:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	220c      	movs	r2, #12
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d00e      	beq.n	80018da <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018bc:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	220c      	movs	r2, #12
 80018c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d114      	bne.n	80018f2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018c8:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	23c0      	movs	r3, #192	; 0xc0
 80018ce:	025b      	lsls	r3, r3, #9
 80018d0:	401a      	ands	r2, r3
 80018d2:	23c0      	movs	r3, #192	; 0xc0
 80018d4:	025b      	lsls	r3, r3, #9
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d10b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80018da:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80018dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	029b      	lsls	r3, r3, #10
 80018e2:	4013      	ands	r3, r2
 80018e4:	d040      	beq.n	8001968 <HAL_RCC_OscConfig+0x5a8>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d03c      	beq.n	8001968 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0e6      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01b      	beq.n	8001932 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80018fa:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80018fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fe:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0249      	lsls	r1, r1, #9
 8001904:	430a      	orrs	r2, r1
 8001906:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff f8c6 	bl	8000a98 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001912:	f7ff f8c1 	bl	8000a98 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e0cd      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001924:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	029b      	lsls	r3, r3, #10
 800192c:	4013      	ands	r3, r2
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x552>
 8001930:	e01b      	b.n	800196a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001932:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001938:	4943      	ldr	r1, [pc, #268]	; (8001a48 <HAL_RCC_OscConfig+0x688>)
 800193a:	400a      	ands	r2, r1
 800193c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff f8ab 	bl	8000a98 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001948:	f7ff f8a6 	bl	8000a98 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0b2      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800195c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	029b      	lsls	r3, r3, #10
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x588>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001968:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	2b00      	cmp	r3, #0
 8001970:	d100      	bne.n	8001974 <HAL_RCC_OscConfig+0x5b4>
 8001972:	e0a4      	b.n	8001abe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	220c      	movs	r2, #12
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x5c2>
 8001980:	e078      	b.n	8001a74 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	2b02      	cmp	r3, #2
 8001988:	d14c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001990:	492e      	ldr	r1, [pc, #184]	; (8001a4c <HAL_RCC_OscConfig+0x68c>)
 8001992:	400a      	ands	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff f87f 	bl	8000a98 <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f87a 	bl	8000a98 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e086      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	049b      	lsls	r3, r3, #18
 80019ba:	4013      	ands	r3, r2
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	220f      	movs	r2, #15
 80019c4:	4393      	bics	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80019ce:	430a      	orrs	r2, r1
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <HAL_RCC_OscConfig+0x690>)
 80019d8:	4013      	ands	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	431a      	orrs	r2, r3
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	0449      	lsls	r1, r1, #17
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff f84d 	bl	8000a98 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff f848 	bl	8000a98 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e054      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	049b      	lsls	r3, r3, #18
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x644>
 8001a22:	e04c      	b.n	8001abe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <HAL_RCC_OscConfig+0x68c>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff f832 	bl	8000a98 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x6a6>
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	00001388 	.word	0x00001388
 8001a44:	efffffff 	.word	0xefffffff
 8001a48:	fffeffff 	.word	0xfffeffff
 8001a4c:	feffffff 	.word	0xfeffffff
 8001a50:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f820 	bl	8000a98 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e02c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_RCC_OscConfig+0x708>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	049b      	lsls	r3, r3, #18
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x694>
 8001a72:	e024      	b.n	8001abe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e01f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_RCC_OscConfig+0x708>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_OscConfig+0x708>)
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	23c0      	movs	r3, #192	; 0xc0
 8001a90:	025b      	lsls	r3, r3, #9
 8001a92:	401a      	ands	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d10e      	bne.n	8001aba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	23f0      	movs	r3, #240	; 0xf0
 8001aae:	039b      	lsls	r3, r3, #14
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b008      	add	sp, #32
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000

08001acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0bf      	b.n	8001c60 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b61      	ldr	r3, [pc, #388]	; (8001c68 <HAL_RCC_ClockConfig+0x19c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d911      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <HAL_RCC_ClockConfig+0x19c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	4393      	bics	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <HAL_RCC_ClockConfig+0x19c>)
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x19c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0a6      	b.n	8001c60 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2202      	movs	r2, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d015      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2204      	movs	r2, #4
 8001b22:	4013      	ands	r3, r2
 8001b24:	d006      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b26:	4b51      	ldr	r3, [pc, #324]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001b2c:	21e0      	movs	r1, #224	; 0xe0
 8001b2e:	00c9      	lsls	r1, r1, #3
 8001b30:	430a      	orrs	r2, r1
 8001b32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b4d      	ldr	r3, [pc, #308]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	22f0      	movs	r2, #240	; 0xf0
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d04c      	beq.n	8001bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	029b      	lsls	r3, r3, #10
 8001b62:	4013      	ands	r3, r2
 8001b64:	d120      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07a      	b.n	8001c60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	049b      	lsls	r3, r3, #18
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d114      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e06e      	b.n	8001c60 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4013      	ands	r3, r2
 8001b94:	d108      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e062      	b.n	8001c60 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e05b      	b.n	8001c60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2203      	movs	r2, #3
 8001bae:	4393      	bics	r3, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bbc:	f7fe ff6c 	bl	8000a98 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc4:	e009      	b.n	8001bda <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc6:	f7fe ff67 	bl	8000a98 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	4a27      	ldr	r2, [pc, #156]	; (8001c70 <HAL_RCC_ClockConfig+0x1a4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e042      	b.n	8001c60 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	220c      	movs	r2, #12
 8001be0:	401a      	ands	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1ec      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_RCC_ClockConfig+0x19c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d211      	bcs.n	8001c1e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_ClockConfig+0x19c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4393      	bics	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_RCC_ClockConfig+0x19c>)
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <HAL_RCC_ClockConfig+0x19c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	4013      	ands	r3, r2
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e020      	b.n	8001c60 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2204      	movs	r2, #4
 8001c24:	4013      	ands	r3, r2
 8001c26:	d009      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_RCC_ClockConfig+0x1a8>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c3c:	f000 f820 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c40:	0001      	movs	r1, r0
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_RCC_ClockConfig+0x1a0>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	220f      	movs	r2, #15
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x1ac>)
 8001c4e:	5cd3      	ldrb	r3, [r2, r3]
 8001c50:	000a      	movs	r2, r1
 8001c52:	40da      	lsrs	r2, r3
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_RCC_ClockConfig+0x1b0>)
 8001c56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7fe fed7 	bl	8000a0c <HAL_InitTick>
  
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	00001388 	.word	0x00001388
 8001c74:	fffff8ff 	.word	0xfffff8ff
 8001c78:	08003b44 	.word	0x08003b44
 8001c7c:	20000000 	.word	0x20000000

08001c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d046      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xb8>
 8001caa:	d848      	bhi.n	8001d3e <HAL_RCC_GetSysClockFreq+0xbe>
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d002      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d003      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x3c>
 8001cb4:	e043      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001cb8:	613b      	str	r3, [r7, #16]
      break;
 8001cba:	e043      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	0c9b      	lsrs	r3, r3, #18
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	220f      	movs	r2, #15
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xdc>)
 8001cd4:	5cd3      	ldrb	r3, [r2, r3]
 8001cd6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	23c0      	movs	r3, #192	; 0xc0
 8001cdc:	025b      	lsls	r3, r3, #9
 8001cde:	401a      	ands	r2, r3
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	481a      	ldr	r0, [pc, #104]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001cec:	f7fe fa1e 	bl	800012c <__udivsi3>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4353      	muls	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e01a      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	23c0      	movs	r3, #192	; 0xc0
 8001d00:	025b      	lsls	r3, r3, #9
 8001d02:	401a      	ands	r2, r3
 8001d04:	23c0      	movs	r3, #192	; 0xc0
 8001d06:	025b      	lsls	r3, r3, #9
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d109      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	4814      	ldr	r0, [pc, #80]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001d10:	f7fe fa0c 	bl	800012c <__udivsi3>
 8001d14:	0003      	movs	r3, r0
 8001d16:	001a      	movs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4353      	muls	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	480c      	ldr	r0, [pc, #48]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d24:	f7fe fa02 	bl	800012c <__udivsi3>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	001a      	movs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4353      	muls	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	613b      	str	r3, [r7, #16]
      break;
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001d3a:	613b      	str	r3, [r7, #16]
      break;
 8001d3c:	e002      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d40:	613b      	str	r3, [r7, #16]
      break;
 8001d42:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d44:	693b      	ldr	r3, [r7, #16]
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b006      	add	sp, #24
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000
 8001d54:	007a1200 	.word	0x007a1200
 8001d58:	08003b5c 	.word	0x08003b5c
 8001d5c:	08003b6c 	.word	0x08003b6c
 8001d60:	02dc6c00 	.word	0x02dc6c00

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d7c:	f7ff fff2 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d80:	0001      	movs	r1, r0
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	2207      	movs	r2, #7
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	40d9      	lsrs	r1, r3
 8001d92:	000b      	movs	r3, r1
}    
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08003b54 	.word	0x08003b54

08001da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e044      	b.n	8001e40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2278      	movs	r2, #120	; 0x78
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7fe fc7d 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2224      	movs	r2, #36	; 0x24
 8001dd2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 fc2c 	bl	8002644 <UART_SetConfig>
 8001dec:	0003      	movs	r3, r0
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e024      	b.n	8001e40 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f000 fda7 	bl	8002954 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	490d      	ldr	r1, [pc, #52]	; (8001e48 <HAL_UART_Init+0xa4>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	212a      	movs	r1, #42	; 0x2a
 8001e22:	438a      	bics	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 fe3f 	bl	8002abc <UART_CheckIdleState>
 8001e3e:	0003      	movs	r3, r0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	ffffb7ff 	.word	0xffffb7ff

08001e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	1dbb      	adds	r3, r7, #6
 8001e5a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d000      	beq.n	8001e66 <HAL_UART_Transmit+0x1a>
 8001e64:	e08d      	b.n	8001f82 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_UART_Transmit+0x28>
 8001e6c:	1dbb      	adds	r3, r7, #6
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e085      	b.n	8001f84 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	015b      	lsls	r3, r3, #5
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d109      	bne.n	8001e98 <HAL_UART_Transmit+0x4c>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d105      	bne.n	8001e98 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e075      	b.n	8001f84 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2284      	movs	r2, #132	; 0x84
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2221      	movs	r2, #33	; 0x21
 8001ea4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ea6:	f7fe fdf7 	bl	8000a98 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1dba      	adds	r2, r7, #6
 8001eb2:	2150      	movs	r1, #80	; 0x50
 8001eb4:	8812      	ldrh	r2, [r2, #0]
 8001eb6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1dba      	adds	r2, r7, #6
 8001ebc:	2152      	movs	r1, #82	; 0x52
 8001ebe:	8812      	ldrh	r2, [r2, #0]
 8001ec0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	015b      	lsls	r3, r3, #5
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d108      	bne.n	8001ee0 <HAL_UART_Transmit+0x94>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d104      	bne.n	8001ee0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	e003      	b.n	8001ee8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ee8:	e030      	b.n	8001f4c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	f000 fe88 	bl	8002c0c <UART_WaitOnFlagUntilTimeout>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d004      	beq.n	8001f0a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e03c      	b.n	8001f84 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10b      	bne.n	8001f28 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	881a      	ldrh	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	05d2      	lsls	r2, r2, #23
 8001f1a:	0dd2      	lsrs	r2, r2, #23
 8001f1c:	b292      	uxth	r2, r2
 8001f1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	3302      	adds	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	e008      	b.n	8001f3a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	b292      	uxth	r2, r2
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3301      	adds	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2252      	movs	r2, #82	; 0x52
 8001f3e:	5a9b      	ldrh	r3, [r3, r2]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b299      	uxth	r1, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2252      	movs	r2, #82	; 0x52
 8001f4a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2252      	movs	r2, #82	; 0x52
 8001f50:	5a9b      	ldrh	r3, [r3, r2]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1c8      	bne.n	8001eea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	0013      	movs	r3, r2
 8001f62:	2200      	movs	r2, #0
 8001f64:	2140      	movs	r1, #64	; 0x40
 8001f66:	f000 fe51 	bl	8002c0c <UART_WaitOnFlagUntilTimeout>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d004      	beq.n	8001f78 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e005      	b.n	8001f84 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
  }
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b008      	add	sp, #32
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	1dbb      	adds	r3, r7, #6
 8001f98:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	589b      	ldr	r3, [r3, r2]
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d145      	bne.n	8002030 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_UART_Receive_DMA+0x26>
 8001faa:	1dbb      	adds	r3, r7, #6
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e03d      	b.n	8002032 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	015b      	lsls	r3, r3, #5
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d109      	bne.n	8001fd6 <HAL_UART_Receive_DMA+0x4a>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d001      	beq.n	8001fd6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e02d      	b.n	8002032 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d019      	beq.n	800201e <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fea:	f3ef 8310 	mrs	r3, PRIMASK
 8001fee:	613b      	str	r3, [r7, #16]
  return(result);
 8001ff0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f383 8810 	msr	PRIMASK, r3
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	04c9      	lsls	r1, r1, #19
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f383 8810 	msr	PRIMASK, r3
}
 800201c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800201e:	1dbb      	adds	r3, r7, #6
 8002020:	881a      	ldrh	r2, [r3, #0]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	0018      	movs	r0, r3
 8002028:	f000 fe5a 	bl	8002ce0 <UART_Start_Receive_DMA>
 800202c:	0003      	movs	r3, r0
 800202e:	e000      	b.n	8002032 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b008      	add	sp, #32
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b0ab      	sub	sp, #172	; 0xac
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	22a4      	movs	r2, #164	; 0xa4
 800204c:	18b9      	adds	r1, r7, r2
 800204e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	20a0      	movs	r0, #160	; 0xa0
 8002058:	1839      	adds	r1, r7, r0
 800205a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	219c      	movs	r1, #156	; 0x9c
 8002064:	1879      	adds	r1, r7, r1
 8002066:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002068:	0011      	movs	r1, r2
 800206a:	18bb      	adds	r3, r7, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a99      	ldr	r2, [pc, #612]	; (80022d4 <HAL_UART_IRQHandler+0x298>)
 8002070:	4013      	ands	r3, r2
 8002072:	2298      	movs	r2, #152	; 0x98
 8002074:	18bc      	adds	r4, r7, r2
 8002076:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002078:	18bb      	adds	r3, r7, r2
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d114      	bne.n	80020aa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002080:	187b      	adds	r3, r7, r1
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2220      	movs	r2, #32
 8002086:	4013      	ands	r3, r2
 8002088:	d00f      	beq.n	80020aa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800208a:	183b      	adds	r3, r7, r0
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2220      	movs	r2, #32
 8002090:	4013      	ands	r3, r2
 8002092:	d00a      	beq.n	80020aa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002098:	2b00      	cmp	r3, #0
 800209a:	d100      	bne.n	800209e <HAL_UART_IRQHandler+0x62>
 800209c:	e29e      	b.n	80025dc <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	0010      	movs	r0, r2
 80020a6:	4798      	blx	r3
      }
      return;
 80020a8:	e298      	b.n	80025dc <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80020aa:	2398      	movs	r3, #152	; 0x98
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d100      	bne.n	80020b6 <HAL_UART_IRQHandler+0x7a>
 80020b4:	e114      	b.n	80022e0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80020b6:	239c      	movs	r3, #156	; 0x9c
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2201      	movs	r2, #1
 80020be:	4013      	ands	r3, r2
 80020c0:	d106      	bne.n	80020d0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80020c2:	23a0      	movs	r3, #160	; 0xa0
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a83      	ldr	r2, [pc, #524]	; (80022d8 <HAL_UART_IRQHandler+0x29c>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	d100      	bne.n	80020d0 <HAL_UART_IRQHandler+0x94>
 80020ce:	e107      	b.n	80022e0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80020d0:	23a4      	movs	r3, #164	; 0xa4
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d012      	beq.n	8002102 <HAL_UART_IRQHandler+0xc6>
 80020dc:	23a0      	movs	r3, #160	; 0xa0
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	d00b      	beq.n	8002102 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2284      	movs	r2, #132	; 0x84
 80020f6:	589b      	ldr	r3, [r3, r2]
 80020f8:	2201      	movs	r2, #1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2184      	movs	r1, #132	; 0x84
 8002100:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002102:	23a4      	movs	r3, #164	; 0xa4
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2202      	movs	r2, #2
 800210a:	4013      	ands	r3, r2
 800210c:	d011      	beq.n	8002132 <HAL_UART_IRQHandler+0xf6>
 800210e:	239c      	movs	r3, #156	; 0x9c
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	d00b      	beq.n	8002132 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2202      	movs	r2, #2
 8002120:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2284      	movs	r2, #132	; 0x84
 8002126:	589b      	ldr	r3, [r3, r2]
 8002128:	2204      	movs	r2, #4
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2184      	movs	r1, #132	; 0x84
 8002130:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002132:	23a4      	movs	r3, #164	; 0xa4
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2204      	movs	r2, #4
 800213a:	4013      	ands	r3, r2
 800213c:	d011      	beq.n	8002162 <HAL_UART_IRQHandler+0x126>
 800213e:	239c      	movs	r3, #156	; 0x9c
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2201      	movs	r2, #1
 8002146:	4013      	ands	r3, r2
 8002148:	d00b      	beq.n	8002162 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2204      	movs	r2, #4
 8002150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2284      	movs	r2, #132	; 0x84
 8002156:	589b      	ldr	r3, [r3, r2]
 8002158:	2202      	movs	r2, #2
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2184      	movs	r1, #132	; 0x84
 8002160:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002162:	23a4      	movs	r3, #164	; 0xa4
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2208      	movs	r2, #8
 800216a:	4013      	ands	r3, r2
 800216c:	d017      	beq.n	800219e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800216e:	23a0      	movs	r3, #160	; 0xa0
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2220      	movs	r2, #32
 8002176:	4013      	ands	r3, r2
 8002178:	d105      	bne.n	8002186 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800217a:	239c      	movs	r3, #156	; 0x9c
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002184:	d00b      	beq.n	800219e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2208      	movs	r2, #8
 800218c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2284      	movs	r2, #132	; 0x84
 8002192:	589b      	ldr	r3, [r3, r2]
 8002194:	2208      	movs	r2, #8
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2184      	movs	r1, #132	; 0x84
 800219c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800219e:	23a4      	movs	r3, #164	; 0xa4
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	4013      	ands	r3, r2
 80021aa:	d013      	beq.n	80021d4 <HAL_UART_IRQHandler+0x198>
 80021ac:	23a0      	movs	r3, #160	; 0xa0
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	04db      	lsls	r3, r3, #19
 80021b6:	4013      	ands	r3, r2
 80021b8:	d00c      	beq.n	80021d4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2284      	movs	r2, #132	; 0x84
 80021c8:	589b      	ldr	r3, [r3, r2]
 80021ca:	2220      	movs	r2, #32
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2184      	movs	r1, #132	; 0x84
 80021d2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2284      	movs	r2, #132	; 0x84
 80021d8:	589b      	ldr	r3, [r3, r2]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d100      	bne.n	80021e0 <HAL_UART_IRQHandler+0x1a4>
 80021de:	e1ff      	b.n	80025e0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80021e0:	23a4      	movs	r3, #164	; 0xa4
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2220      	movs	r2, #32
 80021e8:	4013      	ands	r3, r2
 80021ea:	d00e      	beq.n	800220a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021ec:	23a0      	movs	r3, #160	; 0xa0
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2220      	movs	r2, #32
 80021f4:	4013      	ands	r3, r2
 80021f6:	d008      	beq.n	800220a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	0010      	movs	r0, r2
 8002208:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2284      	movs	r2, #132	; 0x84
 800220e:	589b      	ldr	r3, [r3, r2]
 8002210:	2194      	movs	r1, #148	; 0x94
 8002212:	187a      	adds	r2, r7, r1
 8002214:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2240      	movs	r2, #64	; 0x40
 800221e:	4013      	ands	r3, r2
 8002220:	2b40      	cmp	r3, #64	; 0x40
 8002222:	d004      	beq.n	800222e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002224:	187b      	adds	r3, r7, r1
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2228      	movs	r2, #40	; 0x28
 800222a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800222c:	d047      	beq.n	80022be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fe19 	bl	8002e68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2240      	movs	r2, #64	; 0x40
 800223e:	4013      	ands	r3, r2
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d137      	bne.n	80022b4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002244:	f3ef 8310 	mrs	r3, PRIMASK
 8002248:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800224a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800224c:	2090      	movs	r0, #144	; 0x90
 800224e:	183a      	adds	r2, r7, r0
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	2301      	movs	r3, #1
 8002254:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002258:	f383 8810 	msr	PRIMASK, r3
}
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2140      	movs	r1, #64	; 0x40
 800226a:	438a      	bics	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	183b      	adds	r3, r7, r0
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002276:	f383 8810 	msr	PRIMASK, r3
}
 800227a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002280:	2b00      	cmp	r3, #0
 8002282:	d012      	beq.n	80022aa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <HAL_UART_IRQHandler+0x2a0>)
 800228a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002290:	0018      	movs	r0, r3
 8002292:	f7fe fdcf 	bl	8000e34 <HAL_DMA_Abort_IT>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d01a      	beq.n	80022d0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a4:	0018      	movs	r0, r3
 80022a6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a8:	e012      	b.n	80022d0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 f9b5 	bl	800261c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b2:	e00d      	b.n	80022d0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 f9b0 	bl	800261c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022bc:	e008      	b.n	80022d0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 f9ab 	bl	800261c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2284      	movs	r2, #132	; 0x84
 80022ca:	2100      	movs	r1, #0
 80022cc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80022ce:	e187      	b.n	80025e0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022d0:	46c0      	nop			; (mov r8, r8)
    return;
 80022d2:	e185      	b.n	80025e0 <HAL_UART_IRQHandler+0x5a4>
 80022d4:	0000080f 	.word	0x0000080f
 80022d8:	04000120 	.word	0x04000120
 80022dc:	08003123 	.word	0x08003123

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d000      	beq.n	80022ea <HAL_UART_IRQHandler+0x2ae>
 80022e8:	e139      	b.n	800255e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80022ea:	23a4      	movs	r3, #164	; 0xa4
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2210      	movs	r2, #16
 80022f2:	4013      	ands	r3, r2
 80022f4:	d100      	bne.n	80022f8 <HAL_UART_IRQHandler+0x2bc>
 80022f6:	e132      	b.n	800255e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80022f8:	23a0      	movs	r3, #160	; 0xa0
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2210      	movs	r2, #16
 8002300:	4013      	ands	r3, r2
 8002302:	d100      	bne.n	8002306 <HAL_UART_IRQHandler+0x2ca>
 8002304:	e12b      	b.n	800255e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2210      	movs	r2, #16
 800230c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2240      	movs	r2, #64	; 0x40
 8002316:	4013      	ands	r3, r2
 8002318:	2b40      	cmp	r3, #64	; 0x40
 800231a:	d000      	beq.n	800231e <HAL_UART_IRQHandler+0x2e2>
 800231c:	e09f      	b.n	800245e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	217e      	movs	r1, #126	; 0x7e
 8002328:	187b      	adds	r3, r7, r1
 800232a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800232c:	187b      	adds	r3, r7, r1
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d100      	bne.n	8002336 <HAL_UART_IRQHandler+0x2fa>
 8002334:	e156      	b.n	80025e4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2258      	movs	r2, #88	; 0x58
 800233a:	5a9b      	ldrh	r3, [r3, r2]
 800233c:	187a      	adds	r2, r7, r1
 800233e:	8812      	ldrh	r2, [r2, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d300      	bcc.n	8002346 <HAL_UART_IRQHandler+0x30a>
 8002344:	e14e      	b.n	80025e4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	187a      	adds	r2, r7, r1
 800234a:	215a      	movs	r1, #90	; 0x5a
 800234c:	8812      	ldrh	r2, [r2, #0]
 800234e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b20      	cmp	r3, #32
 8002358:	d06f      	beq.n	800243a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800235a:	f3ef 8310 	mrs	r3, PRIMASK
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002362:	67bb      	str	r3, [r7, #120]	; 0x78
 8002364:	2301      	movs	r3, #1
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236a:	f383 8810 	msr	PRIMASK, r3
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	499e      	ldr	r1, [pc, #632]	; (80025f4 <HAL_UART_IRQHandler+0x5b8>)
 800237c:	400a      	ands	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002382:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002386:	f383 8810 	msr	PRIMASK, r3
}
 800238a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800238c:	f3ef 8310 	mrs	r3, PRIMASK
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002394:	677b      	str	r3, [r7, #116]	; 0x74
 8002396:	2301      	movs	r3, #1
 8002398:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800239a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239c:	f383 8810 	msr	PRIMASK, r3
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2101      	movs	r1, #1
 80023ae:	438a      	bics	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b8:	f383 8810 	msr	PRIMASK, r3
}
 80023bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023be:	f3ef 8310 	mrs	r3, PRIMASK
 80023c2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80023c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023c6:	673b      	str	r3, [r7, #112]	; 0x70
 80023c8:	2301      	movs	r3, #1
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ce:	f383 8810 	msr	PRIMASK, r3
}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2140      	movs	r1, #64	; 0x40
 80023e0:	438a      	bics	r2, r1
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023e6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ea:	f383 8810 	msr	PRIMASK, r3
}
 80023ee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2280      	movs	r2, #128	; 0x80
 80023f4:	2120      	movs	r1, #32
 80023f6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002402:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002404:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002408:	2301      	movs	r3, #1
 800240a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800240e:	f383 8810 	msr	PRIMASK, r3
}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2110      	movs	r1, #16
 8002420:	438a      	bics	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002426:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242a:	f383 8810 	msr	PRIMASK, r3
}
 800242e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002434:	0018      	movs	r0, r3
 8002436:	f7fe fcc5 	bl	8000dc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2258      	movs	r2, #88	; 0x58
 8002444:	5a9a      	ldrh	r2, [r3, r2]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	215a      	movs	r1, #90	; 0x5a
 800244a:	5a5b      	ldrh	r3, [r3, r1]
 800244c:	b29b      	uxth	r3, r3
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0011      	movs	r1, r2
 8002456:	0018      	movs	r0, r3
 8002458:	f000 f8e8 	bl	800262c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800245c:	e0c2      	b.n	80025e4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2258      	movs	r2, #88	; 0x58
 8002462:	5a99      	ldrh	r1, [r3, r2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	225a      	movs	r2, #90	; 0x5a
 8002468:	5a9b      	ldrh	r3, [r3, r2]
 800246a:	b29a      	uxth	r2, r3
 800246c:	208e      	movs	r0, #142	; 0x8e
 800246e:	183b      	adds	r3, r7, r0
 8002470:	1a8a      	subs	r2, r1, r2
 8002472:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	225a      	movs	r2, #90	; 0x5a
 8002478:	5a9b      	ldrh	r3, [r3, r2]
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d100      	bne.n	8002482 <HAL_UART_IRQHandler+0x446>
 8002480:	e0b2      	b.n	80025e8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002482:	183b      	adds	r3, r7, r0
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d100      	bne.n	800248c <HAL_UART_IRQHandler+0x450>
 800248a:	e0ad      	b.n	80025e8 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248c:	f3ef 8310 	mrs	r3, PRIMASK
 8002490:	60fb      	str	r3, [r7, #12]
  return(result);
 8002492:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002494:	2488      	movs	r4, #136	; 0x88
 8002496:	193a      	adds	r2, r7, r4
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	2301      	movs	r3, #1
 800249c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f383 8810 	msr	PRIMASK, r3
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4951      	ldr	r1, [pc, #324]	; (80025f8 <HAL_UART_IRQHandler+0x5bc>)
 80024b2:	400a      	ands	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f383 8810 	msr	PRIMASK, r3
}
 80024c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c4:	f3ef 8310 	mrs	r3, PRIMASK
 80024c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80024ca:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024cc:	2484      	movs	r4, #132	; 0x84
 80024ce:	193a      	adds	r2, r7, r4
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	2301      	movs	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f383 8810 	msr	PRIMASK, r3
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	438a      	bics	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	193b      	adds	r3, r7, r4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	f383 8810 	msr	PRIMASK, r3
}
 80024fa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	2120      	movs	r1, #32
 8002502:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002510:	f3ef 8310 	mrs	r3, PRIMASK
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002518:	2480      	movs	r4, #128	; 0x80
 800251a:	193a      	adds	r2, r7, r4
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	2301      	movs	r3, #1
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	f383 8810 	msr	PRIMASK, r3
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2110      	movs	r1, #16
 8002536:	438a      	bics	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	193b      	adds	r3, r7, r4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	f383 8810 	msr	PRIMASK, r3
}
 8002546:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800254e:	183b      	adds	r3, r7, r0
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0011      	movs	r1, r2
 8002556:	0018      	movs	r0, r3
 8002558:	f000 f868 	bl	800262c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800255c:	e044      	b.n	80025e8 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800255e:	23a4      	movs	r3, #164	; 0xa4
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	035b      	lsls	r3, r3, #13
 8002568:	4013      	ands	r3, r2
 800256a:	d010      	beq.n	800258e <HAL_UART_IRQHandler+0x552>
 800256c:	239c      	movs	r3, #156	; 0x9c
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	03db      	lsls	r3, r3, #15
 8002576:	4013      	ands	r3, r2
 8002578:	d009      	beq.n	800258e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2280      	movs	r2, #128	; 0x80
 8002580:	0352      	lsls	r2, r2, #13
 8002582:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 fe0d 	bl	80031a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800258c:	e02f      	b.n	80025ee <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800258e:	23a4      	movs	r3, #164	; 0xa4
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	4013      	ands	r3, r2
 8002598:	d00f      	beq.n	80025ba <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800259a:	23a0      	movs	r3, #160	; 0xa0
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	4013      	ands	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01e      	beq.n	80025ec <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	0010      	movs	r0, r2
 80025b6:	4798      	blx	r3
    }
    return;
 80025b8:	e018      	b.n	80025ec <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80025ba:	23a4      	movs	r3, #164	; 0xa4
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2240      	movs	r2, #64	; 0x40
 80025c2:	4013      	ands	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_UART_IRQHandler+0x5b2>
 80025c6:	23a0      	movs	r3, #160	; 0xa0
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2240      	movs	r2, #64	; 0x40
 80025ce:	4013      	ands	r3, r2
 80025d0:	d00d      	beq.n	80025ee <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fdbb 	bl	8003150 <UART_EndTransmit_IT>
    return;
 80025da:	e008      	b.n	80025ee <HAL_UART_IRQHandler+0x5b2>
      return;
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	e006      	b.n	80025ee <HAL_UART_IRQHandler+0x5b2>
    return;
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	e004      	b.n	80025ee <HAL_UART_IRQHandler+0x5b2>
      return;
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	e002      	b.n	80025ee <HAL_UART_IRQHandler+0x5b2>
      return;
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	e000      	b.n	80025ee <HAL_UART_IRQHandler+0x5b2>
    return;
 80025ec:	46c0      	nop			; (mov r8, r8)
  }

}
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b02b      	add	sp, #172	; 0xac
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	fffffeff 	.word	0xfffffeff
 80025f8:	fffffedf 	.word	0xfffffedf

080025fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	000a      	movs	r2, r1
 8002636:	1cbb      	adds	r3, r7, #2
 8002638:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b002      	add	sp, #8
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800264c:	231e      	movs	r3, #30
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4aaf      	ldr	r2, [pc, #700]	; (8002930 <UART_SetConfig+0x2ec>)
 8002674:	4013      	ands	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4aaa      	ldr	r2, [pc, #680]	; (8002934 <UART_SetConfig+0x2f0>)
 800268a:	4013      	ands	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4aa1      	ldr	r2, [pc, #644]	; (8002938 <UART_SetConfig+0x2f4>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a9d      	ldr	r2, [pc, #628]	; (800293c <UART_SetConfig+0x2f8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d127      	bne.n	800271a <UART_SetConfig+0xd6>
 80026ca:	4b9d      	ldr	r3, [pc, #628]	; (8002940 <UART_SetConfig+0x2fc>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	2203      	movs	r2, #3
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d00d      	beq.n	80026f2 <UART_SetConfig+0xae>
 80026d6:	d81b      	bhi.n	8002710 <UART_SetConfig+0xcc>
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d014      	beq.n	8002706 <UART_SetConfig+0xc2>
 80026dc:	d818      	bhi.n	8002710 <UART_SetConfig+0xcc>
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <UART_SetConfig+0xa4>
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d00a      	beq.n	80026fc <UART_SetConfig+0xb8>
 80026e6:	e013      	b.n	8002710 <UART_SetConfig+0xcc>
 80026e8:	231f      	movs	r3, #31
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e065      	b.n	80027be <UART_SetConfig+0x17a>
 80026f2:	231f      	movs	r3, #31
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	e060      	b.n	80027be <UART_SetConfig+0x17a>
 80026fc:	231f      	movs	r3, #31
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	2204      	movs	r2, #4
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e05b      	b.n	80027be <UART_SetConfig+0x17a>
 8002706:	231f      	movs	r3, #31
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2208      	movs	r2, #8
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e056      	b.n	80027be <UART_SetConfig+0x17a>
 8002710:	231f      	movs	r3, #31
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2210      	movs	r2, #16
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e051      	b.n	80027be <UART_SetConfig+0x17a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a89      	ldr	r2, [pc, #548]	; (8002944 <UART_SetConfig+0x300>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d134      	bne.n	800278e <UART_SetConfig+0x14a>
 8002724:	4b86      	ldr	r3, [pc, #536]	; (8002940 <UART_SetConfig+0x2fc>)
 8002726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002728:	23c0      	movs	r3, #192	; 0xc0
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	4013      	ands	r3, r2
 800272e:	22c0      	movs	r2, #192	; 0xc0
 8002730:	0292      	lsls	r2, r2, #10
 8002732:	4293      	cmp	r3, r2
 8002734:	d017      	beq.n	8002766 <UART_SetConfig+0x122>
 8002736:	22c0      	movs	r2, #192	; 0xc0
 8002738:	0292      	lsls	r2, r2, #10
 800273a:	4293      	cmp	r3, r2
 800273c:	d822      	bhi.n	8002784 <UART_SetConfig+0x140>
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	0292      	lsls	r2, r2, #10
 8002742:	4293      	cmp	r3, r2
 8002744:	d019      	beq.n	800277a <UART_SetConfig+0x136>
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	0292      	lsls	r2, r2, #10
 800274a:	4293      	cmp	r3, r2
 800274c:	d81a      	bhi.n	8002784 <UART_SetConfig+0x140>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <UART_SetConfig+0x118>
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	0252      	lsls	r2, r2, #9
 8002756:	4293      	cmp	r3, r2
 8002758:	d00a      	beq.n	8002770 <UART_SetConfig+0x12c>
 800275a:	e013      	b.n	8002784 <UART_SetConfig+0x140>
 800275c:	231f      	movs	r3, #31
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e02b      	b.n	80027be <UART_SetConfig+0x17a>
 8002766:	231f      	movs	r3, #31
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	2202      	movs	r2, #2
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e026      	b.n	80027be <UART_SetConfig+0x17a>
 8002770:	231f      	movs	r3, #31
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2204      	movs	r2, #4
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e021      	b.n	80027be <UART_SetConfig+0x17a>
 800277a:	231f      	movs	r3, #31
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	2208      	movs	r2, #8
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e01c      	b.n	80027be <UART_SetConfig+0x17a>
 8002784:	231f      	movs	r3, #31
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2210      	movs	r2, #16
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e017      	b.n	80027be <UART_SetConfig+0x17a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6d      	ldr	r2, [pc, #436]	; (8002948 <UART_SetConfig+0x304>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d104      	bne.n	80027a2 <UART_SetConfig+0x15e>
 8002798:	231f      	movs	r3, #31
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e00d      	b.n	80027be <UART_SetConfig+0x17a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a69      	ldr	r2, [pc, #420]	; (800294c <UART_SetConfig+0x308>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d104      	bne.n	80027b6 <UART_SetConfig+0x172>
 80027ac:	231f      	movs	r3, #31
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e003      	b.n	80027be <UART_SetConfig+0x17a>
 80027b6:	231f      	movs	r3, #31
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	2210      	movs	r2, #16
 80027bc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69da      	ldr	r2, [r3, #28]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d15c      	bne.n	8002884 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80027ca:	231f      	movs	r3, #31
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d015      	beq.n	8002800 <UART_SetConfig+0x1bc>
 80027d4:	dc18      	bgt.n	8002808 <UART_SetConfig+0x1c4>
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d00d      	beq.n	80027f6 <UART_SetConfig+0x1b2>
 80027da:	dc15      	bgt.n	8002808 <UART_SetConfig+0x1c4>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <UART_SetConfig+0x1a2>
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d005      	beq.n	80027f0 <UART_SetConfig+0x1ac>
 80027e4:	e010      	b.n	8002808 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e6:	f7ff fac7 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80027ea:	0003      	movs	r3, r0
 80027ec:	61bb      	str	r3, [r7, #24]
        break;
 80027ee:	e012      	b.n	8002816 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027f0:	4b57      	ldr	r3, [pc, #348]	; (8002950 <UART_SetConfig+0x30c>)
 80027f2:	61bb      	str	r3, [r7, #24]
        break;
 80027f4:	e00f      	b.n	8002816 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027f6:	f7ff fa43 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 80027fa:	0003      	movs	r3, r0
 80027fc:	61bb      	str	r3, [r7, #24]
        break;
 80027fe:	e00a      	b.n	8002816 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	61bb      	str	r3, [r7, #24]
        break;
 8002806:	e006      	b.n	8002816 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800280c:	231e      	movs	r3, #30
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
        break;
 8002814:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <UART_SetConfig+0x1da>
 800281c:	e07a      	b.n	8002914 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	005a      	lsls	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	18d2      	adds	r2, r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	0019      	movs	r1, r3
 8002830:	0010      	movs	r0, r2
 8002832:	f7fd fc7b 	bl	800012c <__udivsi3>
 8002836:	0003      	movs	r3, r0
 8002838:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b0f      	cmp	r3, #15
 800283e:	d91c      	bls.n	800287a <UART_SetConfig+0x236>
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	025b      	lsls	r3, r3, #9
 8002846:	429a      	cmp	r2, r3
 8002848:	d217      	bcs.n	800287a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	b29a      	uxth	r2, r3
 800284e:	200e      	movs	r0, #14
 8002850:	183b      	adds	r3, r7, r0
 8002852:	210f      	movs	r1, #15
 8002854:	438a      	bics	r2, r1
 8002856:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	b29b      	uxth	r3, r3
 800285e:	2207      	movs	r2, #7
 8002860:	4013      	ands	r3, r2
 8002862:	b299      	uxth	r1, r3
 8002864:	183b      	adds	r3, r7, r0
 8002866:	183a      	adds	r2, r7, r0
 8002868:	8812      	ldrh	r2, [r2, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	183a      	adds	r2, r7, r0
 8002874:	8812      	ldrh	r2, [r2, #0]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	e04c      	b.n	8002914 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800287a:	231e      	movs	r3, #30
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e047      	b.n	8002914 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002884:	231f      	movs	r3, #31
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b08      	cmp	r3, #8
 800288c:	d015      	beq.n	80028ba <UART_SetConfig+0x276>
 800288e:	dc18      	bgt.n	80028c2 <UART_SetConfig+0x27e>
 8002890:	2b04      	cmp	r3, #4
 8002892:	d00d      	beq.n	80028b0 <UART_SetConfig+0x26c>
 8002894:	dc15      	bgt.n	80028c2 <UART_SetConfig+0x27e>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <UART_SetConfig+0x25c>
 800289a:	2b02      	cmp	r3, #2
 800289c:	d005      	beq.n	80028aa <UART_SetConfig+0x266>
 800289e:	e010      	b.n	80028c2 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028a0:	f7ff fa6a 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80028a4:	0003      	movs	r3, r0
 80028a6:	61bb      	str	r3, [r7, #24]
        break;
 80028a8:	e012      	b.n	80028d0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <UART_SetConfig+0x30c>)
 80028ac:	61bb      	str	r3, [r7, #24]
        break;
 80028ae:	e00f      	b.n	80028d0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028b0:	f7ff f9e6 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 80028b4:	0003      	movs	r3, r0
 80028b6:	61bb      	str	r3, [r7, #24]
        break;
 80028b8:	e00a      	b.n	80028d0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	61bb      	str	r3, [r7, #24]
        break;
 80028c0:	e006      	b.n	80028d0 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028c6:	231e      	movs	r3, #30
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
        break;
 80028ce:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01e      	beq.n	8002914 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	085a      	lsrs	r2, r3, #1
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	18d2      	adds	r2, r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	0019      	movs	r1, r3
 80028e6:	0010      	movs	r0, r2
 80028e8:	f7fd fc20 	bl	800012c <__udivsi3>
 80028ec:	0003      	movs	r3, r0
 80028ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	d90a      	bls.n	800290c <UART_SetConfig+0x2c8>
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	025b      	lsls	r3, r3, #9
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d205      	bcs.n	800290c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	e003      	b.n	8002914 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800290c:	231e      	movs	r3, #30
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002920:	231e      	movs	r3, #30
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	781b      	ldrb	r3, [r3, #0]
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b008      	add	sp, #32
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	efff69f3 	.word	0xefff69f3
 8002934:	ffffcfff 	.word	0xffffcfff
 8002938:	fffff4ff 	.word	0xfffff4ff
 800293c:	40013800 	.word	0x40013800
 8002940:	40021000 	.word	0x40021000
 8002944:	40004400 	.word	0x40004400
 8002948:	40004800 	.word	0x40004800
 800294c:	40004c00 	.word	0x40004c00
 8002950:	007a1200 	.word	0x007a1200

08002954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	2201      	movs	r2, #1
 8002962:	4013      	ands	r3, r2
 8002964:	d00b      	beq.n	800297e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a4a      	ldr	r2, [pc, #296]	; (8002a98 <UART_AdvFeatureConfig+0x144>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2202      	movs	r2, #2
 8002984:	4013      	ands	r3, r2
 8002986:	d00b      	beq.n	80029a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a43      	ldr	r2, [pc, #268]	; (8002a9c <UART_AdvFeatureConfig+0x148>)
 8002990:	4013      	ands	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	2204      	movs	r2, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a3b      	ldr	r2, [pc, #236]	; (8002aa0 <UART_AdvFeatureConfig+0x14c>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2208      	movs	r2, #8
 80029c8:	4013      	ands	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a34      	ldr	r2, [pc, #208]	; (8002aa4 <UART_AdvFeatureConfig+0x150>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2210      	movs	r2, #16
 80029ea:	4013      	ands	r3, r2
 80029ec:	d00b      	beq.n	8002a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <UART_AdvFeatureConfig+0x154>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d00b      	beq.n	8002a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4a25      	ldr	r2, [pc, #148]	; (8002aac <UART_AdvFeatureConfig+0x158>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2240      	movs	r2, #64	; 0x40
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <UART_AdvFeatureConfig+0x15c>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	035b      	lsls	r3, r3, #13
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d10b      	bne.n	8002a6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <UART_AdvFeatureConfig+0x160>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	4013      	ands	r3, r2
 8002a76:	d00b      	beq.n	8002a90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <UART_AdvFeatureConfig+0x164>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
  }
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b002      	add	sp, #8
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	fffdffff 	.word	0xfffdffff
 8002a9c:	fffeffff 	.word	0xfffeffff
 8002aa0:	fffbffff 	.word	0xfffbffff
 8002aa4:	ffff7fff 	.word	0xffff7fff
 8002aa8:	ffffefff 	.word	0xffffefff
 8002aac:	ffffdfff 	.word	0xffffdfff
 8002ab0:	ffefffff 	.word	0xffefffff
 8002ab4:	ff9fffff 	.word	0xff9fffff
 8002ab8:	fff7ffff 	.word	0xfff7ffff

08002abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b092      	sub	sp, #72	; 0x48
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2284      	movs	r2, #132	; 0x84
 8002ac8:	2100      	movs	r1, #0
 8002aca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002acc:	f7fd ffe4 	bl	8000a98 <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2208      	movs	r2, #8
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d12c      	bne.n	8002b3c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	0391      	lsls	r1, r2, #14
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4a46      	ldr	r2, [pc, #280]	; (8002c04 <UART_CheckIdleState+0x148>)
 8002aec:	9200      	str	r2, [sp, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f000 f88c 	bl	8002c0c <UART_WaitOnFlagUntilTimeout>
 8002af4:	1e03      	subs	r3, r0, #0
 8002af6:	d021      	beq.n	8002b3c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af8:	f3ef 8310 	mrs	r3, PRIMASK
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b02:	2301      	movs	r3, #1
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	f383 8810 	msr	PRIMASK, r3
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	438a      	bics	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	f383 8810 	msr	PRIMASK, r3
}
 8002b28:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2278      	movs	r2, #120	; 0x78
 8002b34:	2100      	movs	r1, #0
 8002b36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e05f      	b.n	8002bfc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2204      	movs	r2, #4
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d146      	bne.n	8002bd8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	03d1      	lsls	r1, r2, #15
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4a2c      	ldr	r2, [pc, #176]	; (8002c04 <UART_CheckIdleState+0x148>)
 8002b54:	9200      	str	r2, [sp, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f000 f858 	bl	8002c0c <UART_WaitOnFlagUntilTimeout>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d03b      	beq.n	8002bd8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b60:	f3ef 8310 	mrs	r3, PRIMASK
 8002b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b66:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f383 8810 	msr	PRIMASK, r3
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4921      	ldr	r1, [pc, #132]	; (8002c08 <UART_CheckIdleState+0x14c>)
 8002b82:	400a      	ands	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f383 8810 	msr	PRIMASK, r3
}
 8002b90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b92:	f3ef 8310 	mrs	r3, PRIMASK
 8002b96:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b98:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f383 8810 	msr	PRIMASK, r3
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f383 8810 	msr	PRIMASK, r3
}
 8002bc2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	2120      	movs	r1, #32
 8002bca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2278      	movs	r2, #120	; 0x78
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e011      	b.n	8002bfc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	2120      	movs	r1, #32
 8002be4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2278      	movs	r2, #120	; 0x78
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b010      	add	sp, #64	; 0x40
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	01ffffff 	.word	0x01ffffff
 8002c08:	fffffedf 	.word	0xfffffedf

08002c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	1dfb      	adds	r3, r7, #7
 8002c1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c1c:	e04b      	b.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	3301      	adds	r3, #1
 8002c22:	d048      	beq.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7fd ff38 	bl	8000a98 <HAL_GetTick>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e04b      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2204      	movs	r2, #4
 8002c46:	4013      	ands	r3, r2
 8002c48:	d035      	beq.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	2208      	movs	r2, #8
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d111      	bne.n	8002c7c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f000 f900 	bl	8002e68 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2284      	movs	r2, #132	; 0x84
 8002c6c:	2108      	movs	r1, #8
 8002c6e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2278      	movs	r2, #120	; 0x78
 8002c74:	2100      	movs	r1, #0
 8002c76:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e02c      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	401a      	ands	r2, r3
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d112      	bne.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f000 f8e3 	bl	8002e68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2284      	movs	r2, #132	; 0x84
 8002ca6:	2120      	movs	r1, #32
 8002ca8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2278      	movs	r2, #120	; 0x78
 8002cae:	2100      	movs	r1, #0
 8002cb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e00f      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	425a      	negs	r2, r3
 8002cc6:	4153      	adcs	r3, r2
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	001a      	movs	r2, r3
 8002ccc:	1dfb      	adds	r3, r7, #7
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d0a4      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b004      	add	sp, #16
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b090      	sub	sp, #64	; 0x40
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	1dbb      	adds	r3, r7, #6
 8002cec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1dba      	adds	r2, r7, #6
 8002cf8:	2158      	movs	r1, #88	; 0x58
 8002cfa:	8812      	ldrh	r2, [r2, #0]
 8002cfc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2284      	movs	r2, #132	; 0x84
 8002d02:	2100      	movs	r1, #0
 8002d04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	2122      	movs	r1, #34	; 0x22
 8002d0c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d028      	beq.n	8002d68 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1a:	4a3e      	ldr	r2, [pc, #248]	; (8002e14 <UART_Start_Receive_DMA+0x134>)
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d22:	4a3d      	ldr	r2, [pc, #244]	; (8002e18 <UART_Start_Receive_DMA+0x138>)
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2a:	4a3c      	ldr	r2, [pc, #240]	; (8002e1c <UART_Start_Receive_DMA+0x13c>)
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d32:	2200      	movs	r2, #0
 8002d34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3324      	adds	r3, #36	; 0x24
 8002d40:	0019      	movs	r1, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	001a      	movs	r2, r3
 8002d48:	1dbb      	adds	r3, r7, #6
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	f7fd ffd4 	bl	8000cf8 <HAL_DMA_Start_IT>
 8002d50:	1e03      	subs	r3, r0, #0
 8002d52:	d009      	beq.n	8002d68 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2284      	movs	r2, #132	; 0x84
 8002d58:	2110      	movs	r1, #16
 8002d5a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	2120      	movs	r1, #32
 8002d62:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e050      	b.n	8002e0a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d019      	beq.n	8002da4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d70:	f3ef 8310 	mrs	r3, PRIMASK
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	f383 8810 	msr	PRIMASK, r3
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	0049      	lsls	r1, r1, #1
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da4:	f3ef 8310 	mrs	r3, PRIMASK
 8002da8:	613b      	str	r3, [r7, #16]
  return(result);
 8002daa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dae:	2301      	movs	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f383 8810 	msr	PRIMASK, r3
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dda:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ddc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
 8002de0:	2301      	movs	r3, #1
 8002de2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f383 8810 	msr	PRIMASK, r3
}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2140      	movs	r1, #64	; 0x40
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	f383 8810 	msr	PRIMASK, r3
}
 8002e06:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b010      	add	sp, #64	; 0x40
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	08002f31 	.word	0x08002f31
 8002e18:	0800305d 	.word	0x0800305d
 8002e1c:	0800309f 	.word	0x0800309f

08002e20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e28:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	2301      	movs	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f383 8810 	msr	PRIMASK, r3
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	21c0      	movs	r1, #192	; 0xc0
 8002e4a:	438a      	bics	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f383 8810 	msr	PRIMASK, r3
}
 8002e58:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b006      	add	sp, #24
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08e      	sub	sp, #56	; 0x38
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e70:	f3ef 8310 	mrs	r3, PRIMASK
 8002e74:	617b      	str	r3, [r7, #20]
  return(result);
 8002e76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f383 8810 	msr	PRIMASK, r3
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4926      	ldr	r1, [pc, #152]	; (8002f2c <UART_EndRxTransfer+0xc4>)
 8002e92:	400a      	ands	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea6:	623b      	str	r3, [r7, #32]
  return(result);
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8002eac:	2301      	movs	r3, #1
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	f383 8810 	msr	PRIMASK, r3
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d118      	bne.n	8002f0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002edc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f383 8810 	msr	PRIMASK, r3
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2110      	movs	r1, #16
 8002efe:	438a      	bics	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	2120      	movs	r1, #32
 8002f14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b00e      	add	sp, #56	; 0x38
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	fffffedf 	.word	0xfffffedf

08002f30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b094      	sub	sp, #80	; 0x50
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d06f      	beq.n	8003026 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8002f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f48:	225a      	movs	r2, #90	; 0x5a
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f52:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f54:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f58:	2301      	movs	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f383 8810 	msr	PRIMASK, r3
}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	493a      	ldr	r1, [pc, #232]	; (8003058 <UART_DMAReceiveCplt+0x128>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f383 8810 	msr	PRIMASK, r3
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f80:	f3ef 8310 	mrs	r3, PRIMASK
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f88:	647b      	str	r3, [r7, #68]	; 0x44
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	f383 8810 	msr	PRIMASK, r3
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	438a      	bics	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	f383 8810 	msr	PRIMASK, r3
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	643b      	str	r3, [r7, #64]	; 0x40
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	f383 8810 	msr	PRIMASK, r3
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2140      	movs	r1, #64	; 0x40
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	f383 8810 	msr	PRIMASK, r3
}
 8002fe2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	2120      	movs	r1, #32
 8002fea:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d118      	bne.n	8003026 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ffe:	2301      	movs	r3, #1
 8003000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f383 8810 	msr	PRIMASK, r3
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2110      	movs	r1, #16
 8003016:	438a      	bics	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f383 8810 	msr	PRIMASK, r3
}
 8003024:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	2200      	movs	r2, #0
 800302a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003030:	2b01      	cmp	r3, #1
 8003032:	d108      	bne.n	8003046 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003036:	2258      	movs	r2, #88	; 0x58
 8003038:	5a9a      	ldrh	r2, [r3, r2]
 800303a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303c:	0011      	movs	r1, r2
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff faf4 	bl	800262c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003044:	e003      	b.n	800304e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003048:	0018      	movs	r0, r3
 800304a:	f7fd f8fb 	bl	8000244 <HAL_UART_RxCpltCallback>
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b014      	add	sp, #80	; 0x50
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	fffffeff 	.word	0xfffffeff

0800305c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10a      	bne.n	800308e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2258      	movs	r2, #88	; 0x58
 800307c:	5a9b      	ldrh	r3, [r3, r2]
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	0011      	movs	r1, r2
 8003086:	0018      	movs	r0, r3
 8003088:	f7ff fad0 	bl	800262c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800308c:	e003      	b.n	8003096 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff fabb 	bl	800260c <HAL_UART_RxHalfCpltCallback>
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b004      	add	sp, #16
 800309c:	bd80      	pop	{r7, pc}

0800309e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	589b      	ldr	r3, [r3, r2]
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2280      	movs	r2, #128	; 0x80
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	d10a      	bne.n	80030de <UART_DMAError+0x40>
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b21      	cmp	r3, #33	; 0x21
 80030cc:	d107      	bne.n	80030de <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2252      	movs	r2, #82	; 0x52
 80030d2:	2100      	movs	r1, #0
 80030d4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff fea1 	bl	8002e20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2240      	movs	r2, #64	; 0x40
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d10a      	bne.n	8003102 <UART_DMAError+0x64>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b22      	cmp	r3, #34	; 0x22
 80030f0:	d107      	bne.n	8003102 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	225a      	movs	r2, #90	; 0x5a
 80030f6:	2100      	movs	r1, #0
 80030f8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7ff feb3 	bl	8002e68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2284      	movs	r2, #132	; 0x84
 8003106:	589b      	ldr	r3, [r3, r2]
 8003108:	2210      	movs	r2, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2184      	movs	r1, #132	; 0x84
 8003110:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	0018      	movs	r0, r3
 8003116:	f7ff fa81 	bl	800261c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b006      	add	sp, #24
 8003120:	bd80      	pop	{r7, pc}

08003122 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	225a      	movs	r2, #90	; 0x5a
 8003134:	2100      	movs	r1, #0
 8003136:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2252      	movs	r2, #82	; 0x52
 800313c:	2100      	movs	r1, #0
 800313e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	0018      	movs	r0, r3
 8003144:	f7ff fa6a 	bl	800261c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b004      	add	sp, #16
 800314e:	bd80      	pop	{r7, pc}

08003150 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003158:	f3ef 8310 	mrs	r3, PRIMASK
 800315c:	60bb      	str	r3, [r7, #8]
  return(result);
 800315e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	2301      	movs	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f383 8810 	msr	PRIMASK, r3
}
 800316c:	46c0      	nop			; (mov r8, r8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2140      	movs	r1, #64	; 0x40
 800317a:	438a      	bics	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f383 8810 	msr	PRIMASK, r3
}
 8003188:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f7ff fa2f 	bl	80025fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b006      	add	sp, #24
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b002      	add	sp, #8
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <__errno>:
 80031b8:	4b01      	ldr	r3, [pc, #4]	; (80031c0 <__errno+0x8>)
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	4770      	bx	lr
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	2600      	movs	r6, #0
 80031c8:	4d0c      	ldr	r5, [pc, #48]	; (80031fc <__libc_init_array+0x38>)
 80031ca:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031cc:	1b64      	subs	r4, r4, r5
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	42a6      	cmp	r6, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	2600      	movs	r6, #0
 80031d6:	f000 fca1 	bl	8003b1c <_init>
 80031da:	4d0a      	ldr	r5, [pc, #40]	; (8003204 <__libc_init_array+0x40>)
 80031dc:	4c0a      	ldr	r4, [pc, #40]	; (8003208 <__libc_init_array+0x44>)
 80031de:	1b64      	subs	r4, r4, r5
 80031e0:	10a4      	asrs	r4, r4, #2
 80031e2:	42a6      	cmp	r6, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	00b3      	lsls	r3, r6, #2
 80031ea:	58eb      	ldr	r3, [r5, r3]
 80031ec:	4798      	blx	r3
 80031ee:	3601      	adds	r6, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	00b3      	lsls	r3, r6, #2
 80031f4:	58eb      	ldr	r3, [r5, r3]
 80031f6:	4798      	blx	r3
 80031f8:	3601      	adds	r6, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	08003bb0 	.word	0x08003bb0
 8003200:	08003bb0 	.word	0x08003bb0
 8003204:	08003bb0 	.word	0x08003bb0
 8003208:	08003bb4 	.word	0x08003bb4

0800320c <memcpy>:
 800320c:	2300      	movs	r3, #0
 800320e:	b510      	push	{r4, lr}
 8003210:	429a      	cmp	r2, r3
 8003212:	d100      	bne.n	8003216 <memcpy+0xa>
 8003214:	bd10      	pop	{r4, pc}
 8003216:	5ccc      	ldrb	r4, [r1, r3]
 8003218:	54c4      	strb	r4, [r0, r3]
 800321a:	3301      	adds	r3, #1
 800321c:	e7f8      	b.n	8003210 <memcpy+0x4>

0800321e <memset>:
 800321e:	0003      	movs	r3, r0
 8003220:	1882      	adds	r2, r0, r2
 8003222:	4293      	cmp	r3, r2
 8003224:	d100      	bne.n	8003228 <memset+0xa>
 8003226:	4770      	bx	lr
 8003228:	7019      	strb	r1, [r3, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	e7f9      	b.n	8003222 <memset+0x4>

0800322e <_vsniprintf_r>:
 800322e:	b530      	push	{r4, r5, lr}
 8003230:	0014      	movs	r4, r2
 8003232:	0005      	movs	r5, r0
 8003234:	001a      	movs	r2, r3
 8003236:	b09b      	sub	sp, #108	; 0x6c
 8003238:	2c00      	cmp	r4, #0
 800323a:	da05      	bge.n	8003248 <_vsniprintf_r+0x1a>
 800323c:	238b      	movs	r3, #139	; 0x8b
 800323e:	6003      	str	r3, [r0, #0]
 8003240:	2001      	movs	r0, #1
 8003242:	4240      	negs	r0, r0
 8003244:	b01b      	add	sp, #108	; 0x6c
 8003246:	bd30      	pop	{r4, r5, pc}
 8003248:	2382      	movs	r3, #130	; 0x82
 800324a:	4668      	mov	r0, sp
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	8183      	strh	r3, [r0, #12]
 8003250:	2300      	movs	r3, #0
 8003252:	9100      	str	r1, [sp, #0]
 8003254:	9104      	str	r1, [sp, #16]
 8003256:	429c      	cmp	r4, r3
 8003258:	d000      	beq.n	800325c <_vsniprintf_r+0x2e>
 800325a:	1e63      	subs	r3, r4, #1
 800325c:	9302      	str	r3, [sp, #8]
 800325e:	9305      	str	r3, [sp, #20]
 8003260:	2301      	movs	r3, #1
 8003262:	4669      	mov	r1, sp
 8003264:	425b      	negs	r3, r3
 8003266:	81cb      	strh	r3, [r1, #14]
 8003268:	0028      	movs	r0, r5
 800326a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800326c:	f000 f878 	bl	8003360 <_svfiprintf_r>
 8003270:	1c43      	adds	r3, r0, #1
 8003272:	da01      	bge.n	8003278 <_vsniprintf_r+0x4a>
 8003274:	238b      	movs	r3, #139	; 0x8b
 8003276:	602b      	str	r3, [r5, #0]
 8003278:	2c00      	cmp	r4, #0
 800327a:	d0e3      	beq.n	8003244 <_vsniprintf_r+0x16>
 800327c:	2300      	movs	r3, #0
 800327e:	9a00      	ldr	r2, [sp, #0]
 8003280:	7013      	strb	r3, [r2, #0]
 8003282:	e7df      	b.n	8003244 <_vsniprintf_r+0x16>

08003284 <vsniprintf>:
 8003284:	b507      	push	{r0, r1, r2, lr}
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	0013      	movs	r3, r2
 800328a:	000a      	movs	r2, r1
 800328c:	0001      	movs	r1, r0
 800328e:	4802      	ldr	r0, [pc, #8]	; (8003298 <vsniprintf+0x14>)
 8003290:	6800      	ldr	r0, [r0, #0]
 8003292:	f7ff ffcc 	bl	800322e <_vsniprintf_r>
 8003296:	bd0e      	pop	{r1, r2, r3, pc}
 8003298:	2000000c 	.word	0x2000000c

0800329c <__ssputs_r>:
 800329c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329e:	688e      	ldr	r6, [r1, #8]
 80032a0:	b085      	sub	sp, #20
 80032a2:	0007      	movs	r7, r0
 80032a4:	000c      	movs	r4, r1
 80032a6:	9203      	str	r2, [sp, #12]
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	429e      	cmp	r6, r3
 80032ac:	d83c      	bhi.n	8003328 <__ssputs_r+0x8c>
 80032ae:	2390      	movs	r3, #144	; 0x90
 80032b0:	898a      	ldrh	r2, [r1, #12]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	421a      	tst	r2, r3
 80032b6:	d034      	beq.n	8003322 <__ssputs_r+0x86>
 80032b8:	6909      	ldr	r1, [r1, #16]
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	6960      	ldr	r0, [r4, #20]
 80032be:	1a5b      	subs	r3, r3, r1
 80032c0:	9302      	str	r3, [sp, #8]
 80032c2:	2303      	movs	r3, #3
 80032c4:	4343      	muls	r3, r0
 80032c6:	0fdd      	lsrs	r5, r3, #31
 80032c8:	18ed      	adds	r5, r5, r3
 80032ca:	9b01      	ldr	r3, [sp, #4]
 80032cc:	9802      	ldr	r0, [sp, #8]
 80032ce:	3301      	adds	r3, #1
 80032d0:	181b      	adds	r3, r3, r0
 80032d2:	106d      	asrs	r5, r5, #1
 80032d4:	42ab      	cmp	r3, r5
 80032d6:	d900      	bls.n	80032da <__ssputs_r+0x3e>
 80032d8:	001d      	movs	r5, r3
 80032da:	0553      	lsls	r3, r2, #21
 80032dc:	d532      	bpl.n	8003344 <__ssputs_r+0xa8>
 80032de:	0029      	movs	r1, r5
 80032e0:	0038      	movs	r0, r7
 80032e2:	f000 fb49 	bl	8003978 <_malloc_r>
 80032e6:	1e06      	subs	r6, r0, #0
 80032e8:	d109      	bne.n	80032fe <__ssputs_r+0x62>
 80032ea:	230c      	movs	r3, #12
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	2340      	movs	r3, #64	; 0x40
 80032f0:	2001      	movs	r0, #1
 80032f2:	89a2      	ldrh	r2, [r4, #12]
 80032f4:	4240      	negs	r0, r0
 80032f6:	4313      	orrs	r3, r2
 80032f8:	81a3      	strh	r3, [r4, #12]
 80032fa:	b005      	add	sp, #20
 80032fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032fe:	9a02      	ldr	r2, [sp, #8]
 8003300:	6921      	ldr	r1, [r4, #16]
 8003302:	f7ff ff83 	bl	800320c <memcpy>
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <__ssputs_r+0xc0>)
 800330a:	401a      	ands	r2, r3
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	4313      	orrs	r3, r2
 8003310:	81a3      	strh	r3, [r4, #12]
 8003312:	9b02      	ldr	r3, [sp, #8]
 8003314:	6126      	str	r6, [r4, #16]
 8003316:	18f6      	adds	r6, r6, r3
 8003318:	6026      	str	r6, [r4, #0]
 800331a:	6165      	str	r5, [r4, #20]
 800331c:	9e01      	ldr	r6, [sp, #4]
 800331e:	1aed      	subs	r5, r5, r3
 8003320:	60a5      	str	r5, [r4, #8]
 8003322:	9b01      	ldr	r3, [sp, #4]
 8003324:	429e      	cmp	r6, r3
 8003326:	d900      	bls.n	800332a <__ssputs_r+0x8e>
 8003328:	9e01      	ldr	r6, [sp, #4]
 800332a:	0032      	movs	r2, r6
 800332c:	9903      	ldr	r1, [sp, #12]
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	f000 faa3 	bl	800387a <memmove>
 8003334:	68a3      	ldr	r3, [r4, #8]
 8003336:	2000      	movs	r0, #0
 8003338:	1b9b      	subs	r3, r3, r6
 800333a:	60a3      	str	r3, [r4, #8]
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	199e      	adds	r6, r3, r6
 8003340:	6026      	str	r6, [r4, #0]
 8003342:	e7da      	b.n	80032fa <__ssputs_r+0x5e>
 8003344:	002a      	movs	r2, r5
 8003346:	0038      	movs	r0, r7
 8003348:	f000 fb8c 	bl	8003a64 <_realloc_r>
 800334c:	1e06      	subs	r6, r0, #0
 800334e:	d1e0      	bne.n	8003312 <__ssputs_r+0x76>
 8003350:	0038      	movs	r0, r7
 8003352:	6921      	ldr	r1, [r4, #16]
 8003354:	f000 faa4 	bl	80038a0 <_free_r>
 8003358:	e7c7      	b.n	80032ea <__ssputs_r+0x4e>
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	fffffb7f 	.word	0xfffffb7f

08003360 <_svfiprintf_r>:
 8003360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003362:	b0a1      	sub	sp, #132	; 0x84
 8003364:	9003      	str	r0, [sp, #12]
 8003366:	001d      	movs	r5, r3
 8003368:	898b      	ldrh	r3, [r1, #12]
 800336a:	000f      	movs	r7, r1
 800336c:	0016      	movs	r6, r2
 800336e:	061b      	lsls	r3, r3, #24
 8003370:	d511      	bpl.n	8003396 <_svfiprintf_r+0x36>
 8003372:	690b      	ldr	r3, [r1, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10e      	bne.n	8003396 <_svfiprintf_r+0x36>
 8003378:	2140      	movs	r1, #64	; 0x40
 800337a:	f000 fafd 	bl	8003978 <_malloc_r>
 800337e:	6038      	str	r0, [r7, #0]
 8003380:	6138      	str	r0, [r7, #16]
 8003382:	2800      	cmp	r0, #0
 8003384:	d105      	bne.n	8003392 <_svfiprintf_r+0x32>
 8003386:	230c      	movs	r3, #12
 8003388:	9a03      	ldr	r2, [sp, #12]
 800338a:	3801      	subs	r0, #1
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	b021      	add	sp, #132	; 0x84
 8003390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003392:	2340      	movs	r3, #64	; 0x40
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	2300      	movs	r3, #0
 8003398:	ac08      	add	r4, sp, #32
 800339a:	6163      	str	r3, [r4, #20]
 800339c:	3320      	adds	r3, #32
 800339e:	7663      	strb	r3, [r4, #25]
 80033a0:	3310      	adds	r3, #16
 80033a2:	76a3      	strb	r3, [r4, #26]
 80033a4:	9507      	str	r5, [sp, #28]
 80033a6:	0035      	movs	r5, r6
 80033a8:	782b      	ldrb	r3, [r5, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <_svfiprintf_r+0x52>
 80033ae:	2b25      	cmp	r3, #37	; 0x25
 80033b0:	d147      	bne.n	8003442 <_svfiprintf_r+0xe2>
 80033b2:	1bab      	subs	r3, r5, r6
 80033b4:	9305      	str	r3, [sp, #20]
 80033b6:	42b5      	cmp	r5, r6
 80033b8:	d00c      	beq.n	80033d4 <_svfiprintf_r+0x74>
 80033ba:	0032      	movs	r2, r6
 80033bc:	0039      	movs	r1, r7
 80033be:	9803      	ldr	r0, [sp, #12]
 80033c0:	f7ff ff6c 	bl	800329c <__ssputs_r>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d100      	bne.n	80033ca <_svfiprintf_r+0x6a>
 80033c8:	e0ae      	b.n	8003528 <_svfiprintf_r+0x1c8>
 80033ca:	6962      	ldr	r2, [r4, #20]
 80033cc:	9b05      	ldr	r3, [sp, #20]
 80033ce:	4694      	mov	ip, r2
 80033d0:	4463      	add	r3, ip
 80033d2:	6163      	str	r3, [r4, #20]
 80033d4:	782b      	ldrb	r3, [r5, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d100      	bne.n	80033dc <_svfiprintf_r+0x7c>
 80033da:	e0a5      	b.n	8003528 <_svfiprintf_r+0x1c8>
 80033dc:	2201      	movs	r2, #1
 80033de:	2300      	movs	r3, #0
 80033e0:	4252      	negs	r2, r2
 80033e2:	6062      	str	r2, [r4, #4]
 80033e4:	a904      	add	r1, sp, #16
 80033e6:	3254      	adds	r2, #84	; 0x54
 80033e8:	1852      	adds	r2, r2, r1
 80033ea:	1c6e      	adds	r6, r5, #1
 80033ec:	6023      	str	r3, [r4, #0]
 80033ee:	60e3      	str	r3, [r4, #12]
 80033f0:	60a3      	str	r3, [r4, #8]
 80033f2:	7013      	strb	r3, [r2, #0]
 80033f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80033f6:	2205      	movs	r2, #5
 80033f8:	7831      	ldrb	r1, [r6, #0]
 80033fa:	4854      	ldr	r0, [pc, #336]	; (800354c <_svfiprintf_r+0x1ec>)
 80033fc:	f000 fa32 	bl	8003864 <memchr>
 8003400:	1c75      	adds	r5, r6, #1
 8003402:	2800      	cmp	r0, #0
 8003404:	d11f      	bne.n	8003446 <_svfiprintf_r+0xe6>
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	06d3      	lsls	r3, r2, #27
 800340a:	d504      	bpl.n	8003416 <_svfiprintf_r+0xb6>
 800340c:	2353      	movs	r3, #83	; 0x53
 800340e:	a904      	add	r1, sp, #16
 8003410:	185b      	adds	r3, r3, r1
 8003412:	2120      	movs	r1, #32
 8003414:	7019      	strb	r1, [r3, #0]
 8003416:	0713      	lsls	r3, r2, #28
 8003418:	d504      	bpl.n	8003424 <_svfiprintf_r+0xc4>
 800341a:	2353      	movs	r3, #83	; 0x53
 800341c:	a904      	add	r1, sp, #16
 800341e:	185b      	adds	r3, r3, r1
 8003420:	212b      	movs	r1, #43	; 0x2b
 8003422:	7019      	strb	r1, [r3, #0]
 8003424:	7833      	ldrb	r3, [r6, #0]
 8003426:	2b2a      	cmp	r3, #42	; 0x2a
 8003428:	d016      	beq.n	8003458 <_svfiprintf_r+0xf8>
 800342a:	0035      	movs	r5, r6
 800342c:	2100      	movs	r1, #0
 800342e:	200a      	movs	r0, #10
 8003430:	68e3      	ldr	r3, [r4, #12]
 8003432:	782a      	ldrb	r2, [r5, #0]
 8003434:	1c6e      	adds	r6, r5, #1
 8003436:	3a30      	subs	r2, #48	; 0x30
 8003438:	2a09      	cmp	r2, #9
 800343a:	d94e      	bls.n	80034da <_svfiprintf_r+0x17a>
 800343c:	2900      	cmp	r1, #0
 800343e:	d111      	bne.n	8003464 <_svfiprintf_r+0x104>
 8003440:	e017      	b.n	8003472 <_svfiprintf_r+0x112>
 8003442:	3501      	adds	r5, #1
 8003444:	e7b0      	b.n	80033a8 <_svfiprintf_r+0x48>
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <_svfiprintf_r+0x1ec>)
 8003448:	6822      	ldr	r2, [r4, #0]
 800344a:	1ac0      	subs	r0, r0, r3
 800344c:	2301      	movs	r3, #1
 800344e:	4083      	lsls	r3, r0
 8003450:	4313      	orrs	r3, r2
 8003452:	002e      	movs	r6, r5
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	e7ce      	b.n	80033f6 <_svfiprintf_r+0x96>
 8003458:	9b07      	ldr	r3, [sp, #28]
 800345a:	1d19      	adds	r1, r3, #4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	9107      	str	r1, [sp, #28]
 8003460:	2b00      	cmp	r3, #0
 8003462:	db01      	blt.n	8003468 <_svfiprintf_r+0x108>
 8003464:	930b      	str	r3, [sp, #44]	; 0x2c
 8003466:	e004      	b.n	8003472 <_svfiprintf_r+0x112>
 8003468:	425b      	negs	r3, r3
 800346a:	60e3      	str	r3, [r4, #12]
 800346c:	2302      	movs	r3, #2
 800346e:	4313      	orrs	r3, r2
 8003470:	6023      	str	r3, [r4, #0]
 8003472:	782b      	ldrb	r3, [r5, #0]
 8003474:	2b2e      	cmp	r3, #46	; 0x2e
 8003476:	d10a      	bne.n	800348e <_svfiprintf_r+0x12e>
 8003478:	786b      	ldrb	r3, [r5, #1]
 800347a:	2b2a      	cmp	r3, #42	; 0x2a
 800347c:	d135      	bne.n	80034ea <_svfiprintf_r+0x18a>
 800347e:	9b07      	ldr	r3, [sp, #28]
 8003480:	3502      	adds	r5, #2
 8003482:	1d1a      	adds	r2, r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	9207      	str	r2, [sp, #28]
 8003488:	2b00      	cmp	r3, #0
 800348a:	db2b      	blt.n	80034e4 <_svfiprintf_r+0x184>
 800348c:	9309      	str	r3, [sp, #36]	; 0x24
 800348e:	4e30      	ldr	r6, [pc, #192]	; (8003550 <_svfiprintf_r+0x1f0>)
 8003490:	2203      	movs	r2, #3
 8003492:	0030      	movs	r0, r6
 8003494:	7829      	ldrb	r1, [r5, #0]
 8003496:	f000 f9e5 	bl	8003864 <memchr>
 800349a:	2800      	cmp	r0, #0
 800349c:	d006      	beq.n	80034ac <_svfiprintf_r+0x14c>
 800349e:	2340      	movs	r3, #64	; 0x40
 80034a0:	1b80      	subs	r0, r0, r6
 80034a2:	4083      	lsls	r3, r0
 80034a4:	6822      	ldr	r2, [r4, #0]
 80034a6:	3501      	adds	r5, #1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	6023      	str	r3, [r4, #0]
 80034ac:	7829      	ldrb	r1, [r5, #0]
 80034ae:	2206      	movs	r2, #6
 80034b0:	4828      	ldr	r0, [pc, #160]	; (8003554 <_svfiprintf_r+0x1f4>)
 80034b2:	1c6e      	adds	r6, r5, #1
 80034b4:	7621      	strb	r1, [r4, #24]
 80034b6:	f000 f9d5 	bl	8003864 <memchr>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d03c      	beq.n	8003538 <_svfiprintf_r+0x1d8>
 80034be:	4b26      	ldr	r3, [pc, #152]	; (8003558 <_svfiprintf_r+0x1f8>)
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d125      	bne.n	8003510 <_svfiprintf_r+0x1b0>
 80034c4:	2207      	movs	r2, #7
 80034c6:	9b07      	ldr	r3, [sp, #28]
 80034c8:	3307      	adds	r3, #7
 80034ca:	4393      	bics	r3, r2
 80034cc:	3308      	adds	r3, #8
 80034ce:	9307      	str	r3, [sp, #28]
 80034d0:	6963      	ldr	r3, [r4, #20]
 80034d2:	9a04      	ldr	r2, [sp, #16]
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	6163      	str	r3, [r4, #20]
 80034d8:	e765      	b.n	80033a6 <_svfiprintf_r+0x46>
 80034da:	4343      	muls	r3, r0
 80034dc:	0035      	movs	r5, r6
 80034de:	2101      	movs	r1, #1
 80034e0:	189b      	adds	r3, r3, r2
 80034e2:	e7a6      	b.n	8003432 <_svfiprintf_r+0xd2>
 80034e4:	2301      	movs	r3, #1
 80034e6:	425b      	negs	r3, r3
 80034e8:	e7d0      	b.n	800348c <_svfiprintf_r+0x12c>
 80034ea:	2300      	movs	r3, #0
 80034ec:	200a      	movs	r0, #10
 80034ee:	001a      	movs	r2, r3
 80034f0:	3501      	adds	r5, #1
 80034f2:	6063      	str	r3, [r4, #4]
 80034f4:	7829      	ldrb	r1, [r5, #0]
 80034f6:	1c6e      	adds	r6, r5, #1
 80034f8:	3930      	subs	r1, #48	; 0x30
 80034fa:	2909      	cmp	r1, #9
 80034fc:	d903      	bls.n	8003506 <_svfiprintf_r+0x1a6>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0c5      	beq.n	800348e <_svfiprintf_r+0x12e>
 8003502:	9209      	str	r2, [sp, #36]	; 0x24
 8003504:	e7c3      	b.n	800348e <_svfiprintf_r+0x12e>
 8003506:	4342      	muls	r2, r0
 8003508:	0035      	movs	r5, r6
 800350a:	2301      	movs	r3, #1
 800350c:	1852      	adds	r2, r2, r1
 800350e:	e7f1      	b.n	80034f4 <_svfiprintf_r+0x194>
 8003510:	ab07      	add	r3, sp, #28
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	003a      	movs	r2, r7
 8003516:	0021      	movs	r1, r4
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <_svfiprintf_r+0x1fc>)
 800351a:	9803      	ldr	r0, [sp, #12]
 800351c:	e000      	b.n	8003520 <_svfiprintf_r+0x1c0>
 800351e:	bf00      	nop
 8003520:	9004      	str	r0, [sp, #16]
 8003522:	9b04      	ldr	r3, [sp, #16]
 8003524:	3301      	adds	r3, #1
 8003526:	d1d3      	bne.n	80034d0 <_svfiprintf_r+0x170>
 8003528:	89bb      	ldrh	r3, [r7, #12]
 800352a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800352c:	065b      	lsls	r3, r3, #25
 800352e:	d400      	bmi.n	8003532 <_svfiprintf_r+0x1d2>
 8003530:	e72d      	b.n	800338e <_svfiprintf_r+0x2e>
 8003532:	2001      	movs	r0, #1
 8003534:	4240      	negs	r0, r0
 8003536:	e72a      	b.n	800338e <_svfiprintf_r+0x2e>
 8003538:	ab07      	add	r3, sp, #28
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	003a      	movs	r2, r7
 800353e:	0021      	movs	r1, r4
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <_svfiprintf_r+0x1fc>)
 8003542:	9803      	ldr	r0, [sp, #12]
 8003544:	f000 f87c 	bl	8003640 <_printf_i>
 8003548:	e7ea      	b.n	8003520 <_svfiprintf_r+0x1c0>
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	08003b7c 	.word	0x08003b7c
 8003550:	08003b82 	.word	0x08003b82
 8003554:	08003b86 	.word	0x08003b86
 8003558:	00000000 	.word	0x00000000
 800355c:	0800329d 	.word	0x0800329d

08003560 <_printf_common>:
 8003560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003562:	0015      	movs	r5, r2
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	688a      	ldr	r2, [r1, #8]
 8003568:	690b      	ldr	r3, [r1, #16]
 800356a:	000c      	movs	r4, r1
 800356c:	9000      	str	r0, [sp, #0]
 800356e:	4293      	cmp	r3, r2
 8003570:	da00      	bge.n	8003574 <_printf_common+0x14>
 8003572:	0013      	movs	r3, r2
 8003574:	0022      	movs	r2, r4
 8003576:	602b      	str	r3, [r5, #0]
 8003578:	3243      	adds	r2, #67	; 0x43
 800357a:	7812      	ldrb	r2, [r2, #0]
 800357c:	2a00      	cmp	r2, #0
 800357e:	d001      	beq.n	8003584 <_printf_common+0x24>
 8003580:	3301      	adds	r3, #1
 8003582:	602b      	str	r3, [r5, #0]
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	069b      	lsls	r3, r3, #26
 8003588:	d502      	bpl.n	8003590 <_printf_common+0x30>
 800358a:	682b      	ldr	r3, [r5, #0]
 800358c:	3302      	adds	r3, #2
 800358e:	602b      	str	r3, [r5, #0]
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	2306      	movs	r3, #6
 8003594:	0017      	movs	r7, r2
 8003596:	401f      	ands	r7, r3
 8003598:	421a      	tst	r2, r3
 800359a:	d027      	beq.n	80035ec <_printf_common+0x8c>
 800359c:	0023      	movs	r3, r4
 800359e:	3343      	adds	r3, #67	; 0x43
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	1e5a      	subs	r2, r3, #1
 80035a4:	4193      	sbcs	r3, r2
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	0692      	lsls	r2, r2, #26
 80035aa:	d430      	bmi.n	800360e <_printf_common+0xae>
 80035ac:	0022      	movs	r2, r4
 80035ae:	9901      	ldr	r1, [sp, #4]
 80035b0:	9800      	ldr	r0, [sp, #0]
 80035b2:	9e08      	ldr	r6, [sp, #32]
 80035b4:	3243      	adds	r2, #67	; 0x43
 80035b6:	47b0      	blx	r6
 80035b8:	1c43      	adds	r3, r0, #1
 80035ba:	d025      	beq.n	8003608 <_printf_common+0xa8>
 80035bc:	2306      	movs	r3, #6
 80035be:	6820      	ldr	r0, [r4, #0]
 80035c0:	682a      	ldr	r2, [r5, #0]
 80035c2:	68e1      	ldr	r1, [r4, #12]
 80035c4:	2500      	movs	r5, #0
 80035c6:	4003      	ands	r3, r0
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d103      	bne.n	80035d4 <_printf_common+0x74>
 80035cc:	1a8d      	subs	r5, r1, r2
 80035ce:	43eb      	mvns	r3, r5
 80035d0:	17db      	asrs	r3, r3, #31
 80035d2:	401d      	ands	r5, r3
 80035d4:	68a3      	ldr	r3, [r4, #8]
 80035d6:	6922      	ldr	r2, [r4, #16]
 80035d8:	4293      	cmp	r3, r2
 80035da:	dd01      	ble.n	80035e0 <_printf_common+0x80>
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	18ed      	adds	r5, r5, r3
 80035e0:	2700      	movs	r7, #0
 80035e2:	42bd      	cmp	r5, r7
 80035e4:	d120      	bne.n	8003628 <_printf_common+0xc8>
 80035e6:	2000      	movs	r0, #0
 80035e8:	e010      	b.n	800360c <_printf_common+0xac>
 80035ea:	3701      	adds	r7, #1
 80035ec:	68e3      	ldr	r3, [r4, #12]
 80035ee:	682a      	ldr	r2, [r5, #0]
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	42bb      	cmp	r3, r7
 80035f4:	ddd2      	ble.n	800359c <_printf_common+0x3c>
 80035f6:	0022      	movs	r2, r4
 80035f8:	2301      	movs	r3, #1
 80035fa:	9901      	ldr	r1, [sp, #4]
 80035fc:	9800      	ldr	r0, [sp, #0]
 80035fe:	9e08      	ldr	r6, [sp, #32]
 8003600:	3219      	adds	r2, #25
 8003602:	47b0      	blx	r6
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d1f0      	bne.n	80035ea <_printf_common+0x8a>
 8003608:	2001      	movs	r0, #1
 800360a:	4240      	negs	r0, r0
 800360c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800360e:	2030      	movs	r0, #48	; 0x30
 8003610:	18e1      	adds	r1, r4, r3
 8003612:	3143      	adds	r1, #67	; 0x43
 8003614:	7008      	strb	r0, [r1, #0]
 8003616:	0021      	movs	r1, r4
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	3145      	adds	r1, #69	; 0x45
 800361c:	7809      	ldrb	r1, [r1, #0]
 800361e:	18a2      	adds	r2, r4, r2
 8003620:	3243      	adds	r2, #67	; 0x43
 8003622:	3302      	adds	r3, #2
 8003624:	7011      	strb	r1, [r2, #0]
 8003626:	e7c1      	b.n	80035ac <_printf_common+0x4c>
 8003628:	0022      	movs	r2, r4
 800362a:	2301      	movs	r3, #1
 800362c:	9901      	ldr	r1, [sp, #4]
 800362e:	9800      	ldr	r0, [sp, #0]
 8003630:	9e08      	ldr	r6, [sp, #32]
 8003632:	321a      	adds	r2, #26
 8003634:	47b0      	blx	r6
 8003636:	1c43      	adds	r3, r0, #1
 8003638:	d0e6      	beq.n	8003608 <_printf_common+0xa8>
 800363a:	3701      	adds	r7, #1
 800363c:	e7d1      	b.n	80035e2 <_printf_common+0x82>
	...

08003640 <_printf_i>:
 8003640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003642:	b08b      	sub	sp, #44	; 0x2c
 8003644:	9206      	str	r2, [sp, #24]
 8003646:	000a      	movs	r2, r1
 8003648:	3243      	adds	r2, #67	; 0x43
 800364a:	9307      	str	r3, [sp, #28]
 800364c:	9005      	str	r0, [sp, #20]
 800364e:	9204      	str	r2, [sp, #16]
 8003650:	7e0a      	ldrb	r2, [r1, #24]
 8003652:	000c      	movs	r4, r1
 8003654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003656:	2a78      	cmp	r2, #120	; 0x78
 8003658:	d807      	bhi.n	800366a <_printf_i+0x2a>
 800365a:	2a62      	cmp	r2, #98	; 0x62
 800365c:	d809      	bhi.n	8003672 <_printf_i+0x32>
 800365e:	2a00      	cmp	r2, #0
 8003660:	d100      	bne.n	8003664 <_printf_i+0x24>
 8003662:	e0c1      	b.n	80037e8 <_printf_i+0x1a8>
 8003664:	2a58      	cmp	r2, #88	; 0x58
 8003666:	d100      	bne.n	800366a <_printf_i+0x2a>
 8003668:	e08c      	b.n	8003784 <_printf_i+0x144>
 800366a:	0026      	movs	r6, r4
 800366c:	3642      	adds	r6, #66	; 0x42
 800366e:	7032      	strb	r2, [r6, #0]
 8003670:	e022      	b.n	80036b8 <_printf_i+0x78>
 8003672:	0010      	movs	r0, r2
 8003674:	3863      	subs	r0, #99	; 0x63
 8003676:	2815      	cmp	r0, #21
 8003678:	d8f7      	bhi.n	800366a <_printf_i+0x2a>
 800367a:	f7fc fd4d 	bl	8000118 <__gnu_thumb1_case_shi>
 800367e:	0016      	.short	0x0016
 8003680:	fff6001f 	.word	0xfff6001f
 8003684:	fff6fff6 	.word	0xfff6fff6
 8003688:	001ffff6 	.word	0x001ffff6
 800368c:	fff6fff6 	.word	0xfff6fff6
 8003690:	fff6fff6 	.word	0xfff6fff6
 8003694:	003600a8 	.word	0x003600a8
 8003698:	fff6009a 	.word	0xfff6009a
 800369c:	00b9fff6 	.word	0x00b9fff6
 80036a0:	0036fff6 	.word	0x0036fff6
 80036a4:	fff6fff6 	.word	0xfff6fff6
 80036a8:	009e      	.short	0x009e
 80036aa:	0026      	movs	r6, r4
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	3642      	adds	r6, #66	; 0x42
 80036b0:	1d11      	adds	r1, r2, #4
 80036b2:	6019      	str	r1, [r3, #0]
 80036b4:	6813      	ldr	r3, [r2, #0]
 80036b6:	7033      	strb	r3, [r6, #0]
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0a7      	b.n	800380c <_printf_i+0x1cc>
 80036bc:	6808      	ldr	r0, [r1, #0]
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	1d0a      	adds	r2, r1, #4
 80036c2:	0605      	lsls	r5, r0, #24
 80036c4:	d50b      	bpl.n	80036de <_printf_i+0x9e>
 80036c6:	680d      	ldr	r5, [r1, #0]
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	2d00      	cmp	r5, #0
 80036cc:	da03      	bge.n	80036d6 <_printf_i+0x96>
 80036ce:	232d      	movs	r3, #45	; 0x2d
 80036d0:	9a04      	ldr	r2, [sp, #16]
 80036d2:	426d      	negs	r5, r5
 80036d4:	7013      	strb	r3, [r2, #0]
 80036d6:	4b61      	ldr	r3, [pc, #388]	; (800385c <_printf_i+0x21c>)
 80036d8:	270a      	movs	r7, #10
 80036da:	9303      	str	r3, [sp, #12]
 80036dc:	e01b      	b.n	8003716 <_printf_i+0xd6>
 80036de:	680d      	ldr	r5, [r1, #0]
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	0641      	lsls	r1, r0, #25
 80036e4:	d5f1      	bpl.n	80036ca <_printf_i+0x8a>
 80036e6:	b22d      	sxth	r5, r5
 80036e8:	e7ef      	b.n	80036ca <_printf_i+0x8a>
 80036ea:	680d      	ldr	r5, [r1, #0]
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	1d08      	adds	r0, r1, #4
 80036f0:	6018      	str	r0, [r3, #0]
 80036f2:	062e      	lsls	r6, r5, #24
 80036f4:	d501      	bpl.n	80036fa <_printf_i+0xba>
 80036f6:	680d      	ldr	r5, [r1, #0]
 80036f8:	e003      	b.n	8003702 <_printf_i+0xc2>
 80036fa:	066d      	lsls	r5, r5, #25
 80036fc:	d5fb      	bpl.n	80036f6 <_printf_i+0xb6>
 80036fe:	680d      	ldr	r5, [r1, #0]
 8003700:	b2ad      	uxth	r5, r5
 8003702:	4b56      	ldr	r3, [pc, #344]	; (800385c <_printf_i+0x21c>)
 8003704:	2708      	movs	r7, #8
 8003706:	9303      	str	r3, [sp, #12]
 8003708:	2a6f      	cmp	r2, #111	; 0x6f
 800370a:	d000      	beq.n	800370e <_printf_i+0xce>
 800370c:	3702      	adds	r7, #2
 800370e:	0023      	movs	r3, r4
 8003710:	2200      	movs	r2, #0
 8003712:	3343      	adds	r3, #67	; 0x43
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	6863      	ldr	r3, [r4, #4]
 8003718:	60a3      	str	r3, [r4, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	db03      	blt.n	8003726 <_printf_i+0xe6>
 800371e:	2204      	movs	r2, #4
 8003720:	6821      	ldr	r1, [r4, #0]
 8003722:	4391      	bics	r1, r2
 8003724:	6021      	str	r1, [r4, #0]
 8003726:	2d00      	cmp	r5, #0
 8003728:	d102      	bne.n	8003730 <_printf_i+0xf0>
 800372a:	9e04      	ldr	r6, [sp, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00c      	beq.n	800374a <_printf_i+0x10a>
 8003730:	9e04      	ldr	r6, [sp, #16]
 8003732:	0028      	movs	r0, r5
 8003734:	0039      	movs	r1, r7
 8003736:	f7fc fd7f 	bl	8000238 <__aeabi_uidivmod>
 800373a:	9b03      	ldr	r3, [sp, #12]
 800373c:	3e01      	subs	r6, #1
 800373e:	5c5b      	ldrb	r3, [r3, r1]
 8003740:	7033      	strb	r3, [r6, #0]
 8003742:	002b      	movs	r3, r5
 8003744:	0005      	movs	r5, r0
 8003746:	429f      	cmp	r7, r3
 8003748:	d9f3      	bls.n	8003732 <_printf_i+0xf2>
 800374a:	2f08      	cmp	r7, #8
 800374c:	d109      	bne.n	8003762 <_printf_i+0x122>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	07db      	lsls	r3, r3, #31
 8003752:	d506      	bpl.n	8003762 <_printf_i+0x122>
 8003754:	6863      	ldr	r3, [r4, #4]
 8003756:	6922      	ldr	r2, [r4, #16]
 8003758:	4293      	cmp	r3, r2
 800375a:	dc02      	bgt.n	8003762 <_printf_i+0x122>
 800375c:	2330      	movs	r3, #48	; 0x30
 800375e:	3e01      	subs	r6, #1
 8003760:	7033      	strb	r3, [r6, #0]
 8003762:	9b04      	ldr	r3, [sp, #16]
 8003764:	1b9b      	subs	r3, r3, r6
 8003766:	6123      	str	r3, [r4, #16]
 8003768:	9b07      	ldr	r3, [sp, #28]
 800376a:	0021      	movs	r1, r4
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	9805      	ldr	r0, [sp, #20]
 8003770:	9b06      	ldr	r3, [sp, #24]
 8003772:	aa09      	add	r2, sp, #36	; 0x24
 8003774:	f7ff fef4 	bl	8003560 <_printf_common>
 8003778:	1c43      	adds	r3, r0, #1
 800377a:	d14c      	bne.n	8003816 <_printf_i+0x1d6>
 800377c:	2001      	movs	r0, #1
 800377e:	4240      	negs	r0, r0
 8003780:	b00b      	add	sp, #44	; 0x2c
 8003782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003784:	3145      	adds	r1, #69	; 0x45
 8003786:	700a      	strb	r2, [r1, #0]
 8003788:	4a34      	ldr	r2, [pc, #208]	; (800385c <_printf_i+0x21c>)
 800378a:	9203      	str	r2, [sp, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	6821      	ldr	r1, [r4, #0]
 8003790:	ca20      	ldmia	r2!, {r5}
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	0608      	lsls	r0, r1, #24
 8003796:	d516      	bpl.n	80037c6 <_printf_i+0x186>
 8003798:	07cb      	lsls	r3, r1, #31
 800379a:	d502      	bpl.n	80037a2 <_printf_i+0x162>
 800379c:	2320      	movs	r3, #32
 800379e:	4319      	orrs	r1, r3
 80037a0:	6021      	str	r1, [r4, #0]
 80037a2:	2710      	movs	r7, #16
 80037a4:	2d00      	cmp	r5, #0
 80037a6:	d1b2      	bne.n	800370e <_printf_i+0xce>
 80037a8:	2320      	movs	r3, #32
 80037aa:	6822      	ldr	r2, [r4, #0]
 80037ac:	439a      	bics	r2, r3
 80037ae:	6022      	str	r2, [r4, #0]
 80037b0:	e7ad      	b.n	800370e <_printf_i+0xce>
 80037b2:	2220      	movs	r2, #32
 80037b4:	6809      	ldr	r1, [r1, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	6022      	str	r2, [r4, #0]
 80037ba:	0022      	movs	r2, r4
 80037bc:	2178      	movs	r1, #120	; 0x78
 80037be:	3245      	adds	r2, #69	; 0x45
 80037c0:	7011      	strb	r1, [r2, #0]
 80037c2:	4a27      	ldr	r2, [pc, #156]	; (8003860 <_printf_i+0x220>)
 80037c4:	e7e1      	b.n	800378a <_printf_i+0x14a>
 80037c6:	0648      	lsls	r0, r1, #25
 80037c8:	d5e6      	bpl.n	8003798 <_printf_i+0x158>
 80037ca:	b2ad      	uxth	r5, r5
 80037cc:	e7e4      	b.n	8003798 <_printf_i+0x158>
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	680d      	ldr	r5, [r1, #0]
 80037d2:	1d10      	adds	r0, r2, #4
 80037d4:	6949      	ldr	r1, [r1, #20]
 80037d6:	6018      	str	r0, [r3, #0]
 80037d8:	6813      	ldr	r3, [r2, #0]
 80037da:	062e      	lsls	r6, r5, #24
 80037dc:	d501      	bpl.n	80037e2 <_printf_i+0x1a2>
 80037de:	6019      	str	r1, [r3, #0]
 80037e0:	e002      	b.n	80037e8 <_printf_i+0x1a8>
 80037e2:	066d      	lsls	r5, r5, #25
 80037e4:	d5fb      	bpl.n	80037de <_printf_i+0x19e>
 80037e6:	8019      	strh	r1, [r3, #0]
 80037e8:	2300      	movs	r3, #0
 80037ea:	9e04      	ldr	r6, [sp, #16]
 80037ec:	6123      	str	r3, [r4, #16]
 80037ee:	e7bb      	b.n	8003768 <_printf_i+0x128>
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	1d11      	adds	r1, r2, #4
 80037f4:	6019      	str	r1, [r3, #0]
 80037f6:	6816      	ldr	r6, [r2, #0]
 80037f8:	2100      	movs	r1, #0
 80037fa:	0030      	movs	r0, r6
 80037fc:	6862      	ldr	r2, [r4, #4]
 80037fe:	f000 f831 	bl	8003864 <memchr>
 8003802:	2800      	cmp	r0, #0
 8003804:	d001      	beq.n	800380a <_printf_i+0x1ca>
 8003806:	1b80      	subs	r0, r0, r6
 8003808:	6060      	str	r0, [r4, #4]
 800380a:	6863      	ldr	r3, [r4, #4]
 800380c:	6123      	str	r3, [r4, #16]
 800380e:	2300      	movs	r3, #0
 8003810:	9a04      	ldr	r2, [sp, #16]
 8003812:	7013      	strb	r3, [r2, #0]
 8003814:	e7a8      	b.n	8003768 <_printf_i+0x128>
 8003816:	6923      	ldr	r3, [r4, #16]
 8003818:	0032      	movs	r2, r6
 800381a:	9906      	ldr	r1, [sp, #24]
 800381c:	9805      	ldr	r0, [sp, #20]
 800381e:	9d07      	ldr	r5, [sp, #28]
 8003820:	47a8      	blx	r5
 8003822:	1c43      	adds	r3, r0, #1
 8003824:	d0aa      	beq.n	800377c <_printf_i+0x13c>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	079b      	lsls	r3, r3, #30
 800382a:	d415      	bmi.n	8003858 <_printf_i+0x218>
 800382c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800382e:	68e0      	ldr	r0, [r4, #12]
 8003830:	4298      	cmp	r0, r3
 8003832:	daa5      	bge.n	8003780 <_printf_i+0x140>
 8003834:	0018      	movs	r0, r3
 8003836:	e7a3      	b.n	8003780 <_printf_i+0x140>
 8003838:	0022      	movs	r2, r4
 800383a:	2301      	movs	r3, #1
 800383c:	9906      	ldr	r1, [sp, #24]
 800383e:	9805      	ldr	r0, [sp, #20]
 8003840:	9e07      	ldr	r6, [sp, #28]
 8003842:	3219      	adds	r2, #25
 8003844:	47b0      	blx	r6
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	d098      	beq.n	800377c <_printf_i+0x13c>
 800384a:	3501      	adds	r5, #1
 800384c:	68e3      	ldr	r3, [r4, #12]
 800384e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	42ab      	cmp	r3, r5
 8003854:	dcf0      	bgt.n	8003838 <_printf_i+0x1f8>
 8003856:	e7e9      	b.n	800382c <_printf_i+0x1ec>
 8003858:	2500      	movs	r5, #0
 800385a:	e7f7      	b.n	800384c <_printf_i+0x20c>
 800385c:	08003b8d 	.word	0x08003b8d
 8003860:	08003b9e 	.word	0x08003b9e

08003864 <memchr>:
 8003864:	b2c9      	uxtb	r1, r1
 8003866:	1882      	adds	r2, r0, r2
 8003868:	4290      	cmp	r0, r2
 800386a:	d101      	bne.n	8003870 <memchr+0xc>
 800386c:	2000      	movs	r0, #0
 800386e:	4770      	bx	lr
 8003870:	7803      	ldrb	r3, [r0, #0]
 8003872:	428b      	cmp	r3, r1
 8003874:	d0fb      	beq.n	800386e <memchr+0xa>
 8003876:	3001      	adds	r0, #1
 8003878:	e7f6      	b.n	8003868 <memchr+0x4>

0800387a <memmove>:
 800387a:	b510      	push	{r4, lr}
 800387c:	4288      	cmp	r0, r1
 800387e:	d902      	bls.n	8003886 <memmove+0xc>
 8003880:	188b      	adds	r3, r1, r2
 8003882:	4298      	cmp	r0, r3
 8003884:	d303      	bcc.n	800388e <memmove+0x14>
 8003886:	2300      	movs	r3, #0
 8003888:	e007      	b.n	800389a <memmove+0x20>
 800388a:	5c8b      	ldrb	r3, [r1, r2]
 800388c:	5483      	strb	r3, [r0, r2]
 800388e:	3a01      	subs	r2, #1
 8003890:	d2fb      	bcs.n	800388a <memmove+0x10>
 8003892:	bd10      	pop	{r4, pc}
 8003894:	5ccc      	ldrb	r4, [r1, r3]
 8003896:	54c4      	strb	r4, [r0, r3]
 8003898:	3301      	adds	r3, #1
 800389a:	429a      	cmp	r2, r3
 800389c:	d1fa      	bne.n	8003894 <memmove+0x1a>
 800389e:	e7f8      	b.n	8003892 <memmove+0x18>

080038a0 <_free_r>:
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	0005      	movs	r5, r0
 80038a4:	2900      	cmp	r1, #0
 80038a6:	d010      	beq.n	80038ca <_free_r+0x2a>
 80038a8:	1f0c      	subs	r4, r1, #4
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da00      	bge.n	80038b2 <_free_r+0x12>
 80038b0:	18e4      	adds	r4, r4, r3
 80038b2:	0028      	movs	r0, r5
 80038b4:	f000 f918 	bl	8003ae8 <__malloc_lock>
 80038b8:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <_free_r+0x90>)
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <_free_r+0x2c>
 80038c0:	6063      	str	r3, [r4, #4]
 80038c2:	6014      	str	r4, [r2, #0]
 80038c4:	0028      	movs	r0, r5
 80038c6:	f000 f917 	bl	8003af8 <__malloc_unlock>
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	42a3      	cmp	r3, r4
 80038ce:	d908      	bls.n	80038e2 <_free_r+0x42>
 80038d0:	6821      	ldr	r1, [r4, #0]
 80038d2:	1860      	adds	r0, r4, r1
 80038d4:	4283      	cmp	r3, r0
 80038d6:	d1f3      	bne.n	80038c0 <_free_r+0x20>
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	1841      	adds	r1, r0, r1
 80038de:	6021      	str	r1, [r4, #0]
 80038e0:	e7ee      	b.n	80038c0 <_free_r+0x20>
 80038e2:	001a      	movs	r2, r3
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <_free_r+0x4e>
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	d9f9      	bls.n	80038e2 <_free_r+0x42>
 80038ee:	6811      	ldr	r1, [r2, #0]
 80038f0:	1850      	adds	r0, r2, r1
 80038f2:	42a0      	cmp	r0, r4
 80038f4:	d10b      	bne.n	800390e <_free_r+0x6e>
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	1809      	adds	r1, r1, r0
 80038fa:	1850      	adds	r0, r2, r1
 80038fc:	6011      	str	r1, [r2, #0]
 80038fe:	4283      	cmp	r3, r0
 8003900:	d1e0      	bne.n	80038c4 <_free_r+0x24>
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	1841      	adds	r1, r0, r1
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	6053      	str	r3, [r2, #4]
 800390c:	e7da      	b.n	80038c4 <_free_r+0x24>
 800390e:	42a0      	cmp	r0, r4
 8003910:	d902      	bls.n	8003918 <_free_r+0x78>
 8003912:	230c      	movs	r3, #12
 8003914:	602b      	str	r3, [r5, #0]
 8003916:	e7d5      	b.n	80038c4 <_free_r+0x24>
 8003918:	6821      	ldr	r1, [r4, #0]
 800391a:	1860      	adds	r0, r4, r1
 800391c:	4283      	cmp	r3, r0
 800391e:	d103      	bne.n	8003928 <_free_r+0x88>
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	1841      	adds	r1, r0, r1
 8003926:	6021      	str	r1, [r4, #0]
 8003928:	6063      	str	r3, [r4, #4]
 800392a:	6054      	str	r4, [r2, #4]
 800392c:	e7ca      	b.n	80038c4 <_free_r+0x24>
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	200004e8 	.word	0x200004e8

08003934 <sbrk_aligned>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	4e0f      	ldr	r6, [pc, #60]	; (8003974 <sbrk_aligned+0x40>)
 8003938:	000d      	movs	r5, r1
 800393a:	6831      	ldr	r1, [r6, #0]
 800393c:	0004      	movs	r4, r0
 800393e:	2900      	cmp	r1, #0
 8003940:	d102      	bne.n	8003948 <sbrk_aligned+0x14>
 8003942:	f000 f8bf 	bl	8003ac4 <_sbrk_r>
 8003946:	6030      	str	r0, [r6, #0]
 8003948:	0029      	movs	r1, r5
 800394a:	0020      	movs	r0, r4
 800394c:	f000 f8ba 	bl	8003ac4 <_sbrk_r>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d00a      	beq.n	800396a <sbrk_aligned+0x36>
 8003954:	2303      	movs	r3, #3
 8003956:	1cc5      	adds	r5, r0, #3
 8003958:	439d      	bics	r5, r3
 800395a:	42a8      	cmp	r0, r5
 800395c:	d007      	beq.n	800396e <sbrk_aligned+0x3a>
 800395e:	1a29      	subs	r1, r5, r0
 8003960:	0020      	movs	r0, r4
 8003962:	f000 f8af 	bl	8003ac4 <_sbrk_r>
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	d101      	bne.n	800396e <sbrk_aligned+0x3a>
 800396a:	2501      	movs	r5, #1
 800396c:	426d      	negs	r5, r5
 800396e:	0028      	movs	r0, r5
 8003970:	bd70      	pop	{r4, r5, r6, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	200004ec 	.word	0x200004ec

08003978 <_malloc_r>:
 8003978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800397a:	2203      	movs	r2, #3
 800397c:	1ccb      	adds	r3, r1, #3
 800397e:	4393      	bics	r3, r2
 8003980:	3308      	adds	r3, #8
 8003982:	0006      	movs	r6, r0
 8003984:	001f      	movs	r7, r3
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d232      	bcs.n	80039f0 <_malloc_r+0x78>
 800398a:	270c      	movs	r7, #12
 800398c:	42b9      	cmp	r1, r7
 800398e:	d831      	bhi.n	80039f4 <_malloc_r+0x7c>
 8003990:	0030      	movs	r0, r6
 8003992:	f000 f8a9 	bl	8003ae8 <__malloc_lock>
 8003996:	4d32      	ldr	r5, [pc, #200]	; (8003a60 <_malloc_r+0xe8>)
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	001c      	movs	r4, r3
 800399c:	2c00      	cmp	r4, #0
 800399e:	d12e      	bne.n	80039fe <_malloc_r+0x86>
 80039a0:	0039      	movs	r1, r7
 80039a2:	0030      	movs	r0, r6
 80039a4:	f7ff ffc6 	bl	8003934 <sbrk_aligned>
 80039a8:	0004      	movs	r4, r0
 80039aa:	1c43      	adds	r3, r0, #1
 80039ac:	d11e      	bne.n	80039ec <_malloc_r+0x74>
 80039ae:	682c      	ldr	r4, [r5, #0]
 80039b0:	0025      	movs	r5, r4
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	d14a      	bne.n	8003a4c <_malloc_r+0xd4>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	0029      	movs	r1, r5
 80039ba:	18e3      	adds	r3, r4, r3
 80039bc:	0030      	movs	r0, r6
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	f000 f880 	bl	8003ac4 <_sbrk_r>
 80039c4:	9b01      	ldr	r3, [sp, #4]
 80039c6:	4283      	cmp	r3, r0
 80039c8:	d143      	bne.n	8003a52 <_malloc_r+0xda>
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	3703      	adds	r7, #3
 80039ce:	1aff      	subs	r7, r7, r3
 80039d0:	2303      	movs	r3, #3
 80039d2:	439f      	bics	r7, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	2f0c      	cmp	r7, #12
 80039d8:	d200      	bcs.n	80039dc <_malloc_r+0x64>
 80039da:	270c      	movs	r7, #12
 80039dc:	0039      	movs	r1, r7
 80039de:	0030      	movs	r0, r6
 80039e0:	f7ff ffa8 	bl	8003934 <sbrk_aligned>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d034      	beq.n	8003a52 <_malloc_r+0xda>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	19df      	adds	r7, r3, r7
 80039ec:	6027      	str	r7, [r4, #0]
 80039ee:	e013      	b.n	8003a18 <_malloc_r+0xa0>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	dacb      	bge.n	800398c <_malloc_r+0x14>
 80039f4:	230c      	movs	r3, #12
 80039f6:	2500      	movs	r5, #0
 80039f8:	6033      	str	r3, [r6, #0]
 80039fa:	0028      	movs	r0, r5
 80039fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	1bd1      	subs	r1, r2, r7
 8003a02:	d420      	bmi.n	8003a46 <_malloc_r+0xce>
 8003a04:	290b      	cmp	r1, #11
 8003a06:	d917      	bls.n	8003a38 <_malloc_r+0xc0>
 8003a08:	19e2      	adds	r2, r4, r7
 8003a0a:	6027      	str	r7, [r4, #0]
 8003a0c:	42a3      	cmp	r3, r4
 8003a0e:	d111      	bne.n	8003a34 <_malloc_r+0xbc>
 8003a10:	602a      	str	r2, [r5, #0]
 8003a12:	6863      	ldr	r3, [r4, #4]
 8003a14:	6011      	str	r1, [r2, #0]
 8003a16:	6053      	str	r3, [r2, #4]
 8003a18:	0030      	movs	r0, r6
 8003a1a:	0025      	movs	r5, r4
 8003a1c:	f000 f86c 	bl	8003af8 <__malloc_unlock>
 8003a20:	2207      	movs	r2, #7
 8003a22:	350b      	adds	r5, #11
 8003a24:	1d23      	adds	r3, r4, #4
 8003a26:	4395      	bics	r5, r2
 8003a28:	1aea      	subs	r2, r5, r3
 8003a2a:	429d      	cmp	r5, r3
 8003a2c:	d0e5      	beq.n	80039fa <_malloc_r+0x82>
 8003a2e:	1b5b      	subs	r3, r3, r5
 8003a30:	50a3      	str	r3, [r4, r2]
 8003a32:	e7e2      	b.n	80039fa <_malloc_r+0x82>
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	e7ec      	b.n	8003a12 <_malloc_r+0x9a>
 8003a38:	6862      	ldr	r2, [r4, #4]
 8003a3a:	42a3      	cmp	r3, r4
 8003a3c:	d101      	bne.n	8003a42 <_malloc_r+0xca>
 8003a3e:	602a      	str	r2, [r5, #0]
 8003a40:	e7ea      	b.n	8003a18 <_malloc_r+0xa0>
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	e7e8      	b.n	8003a18 <_malloc_r+0xa0>
 8003a46:	0023      	movs	r3, r4
 8003a48:	6864      	ldr	r4, [r4, #4]
 8003a4a:	e7a7      	b.n	800399c <_malloc_r+0x24>
 8003a4c:	002c      	movs	r4, r5
 8003a4e:	686d      	ldr	r5, [r5, #4]
 8003a50:	e7af      	b.n	80039b2 <_malloc_r+0x3a>
 8003a52:	230c      	movs	r3, #12
 8003a54:	0030      	movs	r0, r6
 8003a56:	6033      	str	r3, [r6, #0]
 8003a58:	f000 f84e 	bl	8003af8 <__malloc_unlock>
 8003a5c:	e7cd      	b.n	80039fa <_malloc_r+0x82>
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	200004e8 	.word	0x200004e8

08003a64 <_realloc_r>:
 8003a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a66:	0007      	movs	r7, r0
 8003a68:	000e      	movs	r6, r1
 8003a6a:	0014      	movs	r4, r2
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	d105      	bne.n	8003a7c <_realloc_r+0x18>
 8003a70:	0011      	movs	r1, r2
 8003a72:	f7ff ff81 	bl	8003978 <_malloc_r>
 8003a76:	0005      	movs	r5, r0
 8003a78:	0028      	movs	r0, r5
 8003a7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a7c:	2a00      	cmp	r2, #0
 8003a7e:	d103      	bne.n	8003a88 <_realloc_r+0x24>
 8003a80:	f7ff ff0e 	bl	80038a0 <_free_r>
 8003a84:	0025      	movs	r5, r4
 8003a86:	e7f7      	b.n	8003a78 <_realloc_r+0x14>
 8003a88:	f000 f83e 	bl	8003b08 <_malloc_usable_size_r>
 8003a8c:	9001      	str	r0, [sp, #4]
 8003a8e:	4284      	cmp	r4, r0
 8003a90:	d803      	bhi.n	8003a9a <_realloc_r+0x36>
 8003a92:	0035      	movs	r5, r6
 8003a94:	0843      	lsrs	r3, r0, #1
 8003a96:	42a3      	cmp	r3, r4
 8003a98:	d3ee      	bcc.n	8003a78 <_realloc_r+0x14>
 8003a9a:	0021      	movs	r1, r4
 8003a9c:	0038      	movs	r0, r7
 8003a9e:	f7ff ff6b 	bl	8003978 <_malloc_r>
 8003aa2:	1e05      	subs	r5, r0, #0
 8003aa4:	d0e8      	beq.n	8003a78 <_realloc_r+0x14>
 8003aa6:	9b01      	ldr	r3, [sp, #4]
 8003aa8:	0022      	movs	r2, r4
 8003aaa:	429c      	cmp	r4, r3
 8003aac:	d900      	bls.n	8003ab0 <_realloc_r+0x4c>
 8003aae:	001a      	movs	r2, r3
 8003ab0:	0031      	movs	r1, r6
 8003ab2:	0028      	movs	r0, r5
 8003ab4:	f7ff fbaa 	bl	800320c <memcpy>
 8003ab8:	0031      	movs	r1, r6
 8003aba:	0038      	movs	r0, r7
 8003abc:	f7ff fef0 	bl	80038a0 <_free_r>
 8003ac0:	e7da      	b.n	8003a78 <_realloc_r+0x14>
	...

08003ac4 <_sbrk_r>:
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	b570      	push	{r4, r5, r6, lr}
 8003ac8:	4d06      	ldr	r5, [pc, #24]	; (8003ae4 <_sbrk_r+0x20>)
 8003aca:	0004      	movs	r4, r0
 8003acc:	0008      	movs	r0, r1
 8003ace:	602b      	str	r3, [r5, #0]
 8003ad0:	f7fc ff22 	bl	8000918 <_sbrk>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d103      	bne.n	8003ae0 <_sbrk_r+0x1c>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d000      	beq.n	8003ae0 <_sbrk_r+0x1c>
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	bd70      	pop	{r4, r5, r6, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	200004f0 	.word	0x200004f0

08003ae8 <__malloc_lock>:
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	4802      	ldr	r0, [pc, #8]	; (8003af4 <__malloc_lock+0xc>)
 8003aec:	f000 f814 	bl	8003b18 <__retarget_lock_acquire_recursive>
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	200004f4 	.word	0x200004f4

08003af8 <__malloc_unlock>:
 8003af8:	b510      	push	{r4, lr}
 8003afa:	4802      	ldr	r0, [pc, #8]	; (8003b04 <__malloc_unlock+0xc>)
 8003afc:	f000 f80d 	bl	8003b1a <__retarget_lock_release_recursive>
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	200004f4 	.word	0x200004f4

08003b08 <_malloc_usable_size_r>:
 8003b08:	1f0b      	subs	r3, r1, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	1f18      	subs	r0, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da01      	bge.n	8003b16 <_malloc_usable_size_r+0xe>
 8003b12:	580b      	ldr	r3, [r1, r0]
 8003b14:	18c0      	adds	r0, r0, r3
 8003b16:	4770      	bx	lr

08003b18 <__retarget_lock_acquire_recursive>:
 8003b18:	4770      	bx	lr

08003b1a <__retarget_lock_release_recursive>:
 8003b1a:	4770      	bx	lr

08003b1c <_init>:
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b22:	bc08      	pop	{r3}
 8003b24:	469e      	mov	lr, r3
 8003b26:	4770      	bx	lr

08003b28 <_fini>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr
